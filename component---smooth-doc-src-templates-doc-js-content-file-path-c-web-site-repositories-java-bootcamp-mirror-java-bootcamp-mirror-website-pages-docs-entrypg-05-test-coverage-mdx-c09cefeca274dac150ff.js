"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2784],{16361:function(e,t,n){n.r(t),n.d(t,{default:function(){return h}});var l=n(63696),a=n(43023);function r(e){const t=Object.assign({h1:"h1",a:"a",div:"div",h2:"h2",h3:"h3",p:"p",img:"img"},(0,a.RP)(),e.components);return l.createElement(l.Fragment,null,l.createElement(t.h1,{id:"05-テストケースの網羅性",style:{position:"relative"}},l.createElement(t.a,{href:"#05-%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E7%B6%B2%E7%BE%85%E6%80%A7","aria-label":"05 テストケースの網羅性 permalink",className:"anchor before"},l.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"05. テストケースの網羅性"),"\n",l.createElement("p",{className:"goal"},"テストケースの網羅性について詳しく知る"),"\n",l.createElement(t.h2,{id:"学習",style:{position:"relative"}},l.createElement(t.a,{href:"#%E5%AD%A6%E7%BF%92","aria-label":"学習 permalink",className:"anchor before"},l.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"学習"),"\n",l.createElement(t.h3,{id:"テストケースの網羅性",style:{position:"relative"}},l.createElement(t.a,{href:"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E7%B6%B2%E7%BE%85%E6%80%A7","aria-label":"テストケースの網羅性 permalink",className:"anchor before"},l.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"テストケースの網羅性"),"\n",l.createElement(t.p,null,"網羅性については「02.ブラックボックステスト/ホワイトボックステスト」でも調べましたが、実際にはそれをどのようにテストに当てはめるかを確認しましょう。"),"\n",l.createElement(t.h2,{id:"テストケースの網羅性の確認",style:{position:"relative"}},l.createElement(t.a,{href:"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E7%B6%B2%E7%BE%85%E6%80%A7%E3%81%AE%E7%A2%BA%E8%AA%8D","aria-label":"テストケースの網羅性の確認 permalink",className:"anchor before"},l.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"テストケースの網羅性の確認"),"\n",l.createElement(t.p,null,"ここでは「04.テストケースの作成方法」で使用したプログラムとテスト仕様書を使って解説をします。\r\n網羅性を確認するにあたって、そもそもこの単体テストでは網羅性をどれくらい細かく確認するか知っている必要があります。"),"\n",l.createElement(t.p,null,"網羅性にはいくつか種類が存在しますが、今回は複合条件網羅(MCC)を適用します。"),"\n",l.createElement(t.h3,{id:"startメソッドの確認",style:{position:"relative"}},l.createElement(t.a,{href:"#start%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E7%A2%BA%E8%AA%8D","aria-label":"startメソッドの確認 permalink",className:"anchor before"},l.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"startメソッドの確認"),"\n",l.createElement(t.p,null,"今回確認するプログラムのメイン処理はLearningクラスのstartメソッドですので、そこから確認をしていきましょう。\r\n網羅性はプログラムが条件によって分岐する処理に対して確認を行います。"),"\n",l.createElement(t.p,null,"start()メソッドでは入力した演算子によって処理が分岐します。\r\nswitch文で処理が4パターンに分かれる部分に対してテストが行われているかを確認します。"),"\n",l.createElement(t.p,null,l.createElement(t.img,{src:"./switch-test-case.png",alt:"switch文のテストケース確認"})),"\n",l.createElement(t.p,null,"この場合は、テスト仕様書のテストケースNo 1-1-7からNo 1-1-10までをクリアできれば、それぞれの分岐を通ったのが確認できます。\r\n既にすべての分岐を網羅しているので追加のテストケースは必要ありません。"),"\n",l.createElement(t.h3,{id:"inputnumberメソッドの確認",style:{position:"relative"}},l.createElement(t.a,{href:"#inputnumber%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E7%A2%BA%E8%AA%8D","aria-label":"inputnumberメソッドの確認 permalink",className:"anchor before"},l.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"inputNumberメソッドの確認"),"\n",l.createElement(t.p,null,"続いて、数字の入力に使っているinputNumberメソッドを確認しましょう。"),"\n",l.createElement(t.p,null,"一つ目のif文ではキーボードから入力した値がint型かどうかを判定し、分岐しています。"),"\n",l.createElement(t.p,null,"二つ目のif文ではisValidInputフラグの値を判定して、分岐しています。"),"\n",l.createElement(t.p,null,l.createElement(t.img,{src:"./if-test-case.png",alt:"if文のテストケース確認"})),"\n",l.createElement(t.p,null,"この場合、黄色い枠の処理は入力した値がint型の場合に実行されます。テストケースNo 1-1-5ではint型の数値を入力し、出力されることを確認しているため、黄色い枠の処理が実行されていることが確認できます。"),"\n",l.createElement(t.p,null,"赤色の枠は入力した値がint型ではなかった場合に実行されます。\r\nテストケースNo 1-1-3ではint型以外の入力値があった場合に警告メッセージを表示して、数値が再度入力できることを確認しているため、不正な入力値が確かに回収されていることが確認できます。"),"\n",l.createElement(t.p,null,"※ここで注意しておきたいのは、今回の実装方法では入力値がint型ではなかった場合にif文の判定が必ず「false」になることです。\r\nそのため、「int型以外の入力値」のテストとしてint型ではない値を一種類だけピックアップしても構いません。\r\n実装方法によっては少数や記号なども別々のテストを実施する必要がありますので注意をしてください。例）正規表現による入力値のテストなど。"),"\n",l.createElement(t.p,null,"最後に緑色の枠はisValidInputの値が「true」の場合と「false」の場合の両方をテストする必要がある。"),"\n",l.createElement(t.p,null,"テストケースNo 1-1-5ではisValidInputの値が「true」のとき、No 1-1-3ではisValidInputの値が「false」のときの確認ができますので追加のテストケースは必要ありません。"),"\n",l.createElement(t.p,null,"これで全ての分岐処理が網羅できていることが確認できたため、テストケースの追加は必要ないことが確認できました。"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?l.createElement(t,e,l.createElement(r,e)):r(e)};function i(e){let{children:t}=e;return t}function h(e){return l.createElement(i,e,l.createElement(c,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-entrypg-05-test-coverage-mdx-c09cefeca274dac150ff.js.map