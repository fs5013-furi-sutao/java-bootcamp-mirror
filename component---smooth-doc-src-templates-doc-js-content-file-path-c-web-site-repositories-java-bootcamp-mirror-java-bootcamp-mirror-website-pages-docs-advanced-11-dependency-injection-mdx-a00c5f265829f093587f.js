"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4524],{67445:function(e,n,r){r.r(n),r.d(n,{default:function(){return s}});var a=r(63696),t=r(43023);function c(e){const n=Object.assign({h1:"h1",a:"a",div:"div",h2:"h2",h3:"h3",p:"p",pre:"pre",code:"code",ol:"ol",li:"li",ul:"ul"},(0,t.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,{id:"11-依存性の注入di",style:{position:"relative"}},a.createElement(n.a,{href:"#11-%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5di","aria-label":"11 依存性の注入di permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"11. 依存性の注入（DI）"),"\n",a.createElement("p",{className:"goal"},"依存性の注入（DI）とは何かが分かり、依存性の注入（DI）のメリットもなんとなく分かり、DI\r\nの実装パターンを知る"),"\n",a.createElement(n.h2,{id:"学習",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%AD%A6%E7%BF%92","aria-label":"学習 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"学習"),"\n",a.createElement(n.h3,{id:"委譲を知る",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%A7%94%E8%AD%B2%E3%82%92%E7%9F%A5%E3%82%8B","aria-label":"委譲を知る permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"委譲を知る"),"\n",a.createElement(n.p,null,"依存性の注入は、Dependency Injection (DI) と呼ばれる、プログラムの設計、実装パターンのことです。"),"\n",a.createElement(n.p,null,"依存性の注入（DI）とは何かを Web で調べてください。\r\n検索キーワードは、「 ",a.createElement(n.a,{href:"https://www.google.com/search?q=java+%E5%A7%94%E8%AD%B2"},"java 依存性の注入")," 」\r\n「 ",a.createElement(n.a,{href:"https://www.google.com/search?q=java+dependency+injection"},"java dependency injection")," 」です。\r\n3 種類ぐらい説明記事やサンプルコードを読んで、Java における「依存性の注入（DI）」とは何か探ってみましょう。"),"\n",a.createElement(n.h2,{id:"依存性の注入とは",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5%E3%81%A8%E3%81%AF","aria-label":"依存性の注入とは permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性の注入とは"),"\n",a.createElement(n.p,null,"Dependency Injection デザインパターンを使用すると、ハードコードされた依存関係をなくし、\r\nアプリケーションを疎結合、拡張可能、および保守可能にすることができます。"),"\n",a.createElement(n.p,null,"Java で依存性注入を実装して、依存性の解決をコンパイル時から実行時に移動できます。"),"\n",a.createElement(n.h2,{id:"ノーマルな実装",style:{position:"relative"}},a.createElement(n.a,{href:"#%E3%83%8E%E3%83%BC%E3%83%9E%E3%83%AB%E3%81%AA%E5%AE%9F%E8%A3%85","aria-label":"ノーマルな実装 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"ノーマルな実装"),"\n",a.createElement(n.p,null,"・・・と言っても、少し難しい話でまったく分からないと思いますので、まずは「依存性の注入」を使わないノーマルな実装を見てみます。"),"\n",a.createElement(n.h3,{id:"1-emailservice",style:{position:"relative"}},a.createElement(n.a,{href:"#1-emailservice","aria-label":"1 emailservice permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1. EmailService"),"\n",a.createElement(n.p,null,"電子メールを送信するために消費するアプリケーションがあるとしましょう。通常、これは以下のように実装します。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},'package advanced.dependency.injection.notdi;\r\n\r\npublic class EmailService {\r\n\r\n\tpublic void sendEmail(String message, String receiver){\r\n\t\t// メール送信のビジネスロジック\r\n        System.out.format(\r\n                "[Email] 送信先: %s, メッセージ: %s %n",\r\n                receiver, message\r\n            );\r\n\t}\r\n}\n')),"\n",a.createElement(n.h3,{id:"2-myapplication",style:{position:"relative"}},a.createElement(n.a,{href:"#2-myapplication","aria-label":"2 myapplication permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2. MyApplication"),"\n",a.createElement(n.p,null,"MyApplication クラスは、受信者の電子メールアドレスに電子メールメッセージを送信するロジックを保持します。\r\nアプリケーションコードは以下のようになります。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.notdi;\r\n\r\npublic class MyApplication {\r\n    private EmailService email = new EmailService();\r\n\r\n\tpublic void processMessages(String message, String receiver){\r\n\t\t// message のバリデーションやロジック操作などを行う\r\n\t\tthis.email.sendEmail(message, receiver);\r\n\t}\r\n}\n")),"\n",a.createElement(n.h3,{id:"3-mylegacysample",style:{position:"relative"}},a.createElement(n.a,{href:"#3-mylegacysample","aria-label":"3 mylegacysample permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3. MyLegacySample"),"\n",a.createElement(n.p,null,"MyApplication クラスを使用して電子メールメッセージを送信するクライアントコードは、次のようになります。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},'package advanced.dependency.injection.notdi;\r\n\r\npublic class MyLegacySample {\r\n    public static void main(String[] args) {\r\n\r\n\t\tMyApplication app = new MyApplication();\r\n\t\tapp.processMessages(\r\n                "こんにちは、山本一郎さん！",\r\n                "i_yamamoto@abc.com"\r\n            );\r\n\t}\r\n}\r\n\n')),"\n",a.createElement(n.p,null,"プログラムの実行結果は次の通りになります。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"[Email] 送信先: i_yamamoto@abc.com, メッセージ: こんにちは、山本一郎さん！\n")),"\n",a.createElement(n.p,null,"一見すると、上記の実装に問題はないようです。ただし、上記のコードロジックには特定の制限があります。"),"\n",a.createElement(n.h2,{id:"ノーマルな実装の問題点",style:{position:"relative"}},a.createElement(n.a,{href:"#%E3%83%8E%E3%83%BC%E3%83%9E%E3%83%AB%E3%81%AA%E5%AE%9F%E8%A3%85%E3%81%AE%E5%95%8F%E9%A1%8C%E7%82%B9","aria-label":"ノーマルな実装の問題点 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"ノーマルな実装の問題点"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://www.journaldev.com/2394/java-dependency-injection-design-pattern-example-tutorial"},"https://www.journaldev.com/2394/java-dependency-injection-design-pattern-example-tutorial")),"\n",a.createElement(n.h3,{id:"1-変更が困難",style:{position:"relative"}},a.createElement(n.a,{href:"#1-%E5%A4%89%E6%9B%B4%E3%81%8C%E5%9B%B0%E9%9B%A3","aria-label":"1 変更が困難 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"1. 変更が困難"),"\n",a.createElement(n.p,null,"MyApplication クラスは、電子メールサービスを初期化してから使用する責任があります。\r\nこれにより、依存関係がハードコードされます。将来、他の高度な電子メールサービスに切り替えたい場合は、MyApplication クラスのコードを変更する必要があります。"),"\n",a.createElement(n.p,null,"つまり、アプリケーションの拡張が困難になり、電子メールサービスが複数のクラスで使用されている場合、それはさらに困難になります。"),"\n",a.createElement(n.h3,{id:"2-機能追加が困難",style:{position:"relative"}},a.createElement(n.a,{href:"#2-%E6%A9%9F%E8%83%BD%E8%BF%BD%E5%8A%A0%E3%81%8C%E5%9B%B0%E9%9B%A3","aria-label":"2 機能追加が困難 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"2. 機能追加が困難"),"\n",a.createElement(n.p,null,"SMS や Facebook メッセージなどの追加のメッセージング機能を提供するようにアプリケーションを拡張する場合は、\r\nそのための別のアプリケーションを作成する必要があります。"),"\n",a.createElement(n.p,null,"これには、アプリケーションクラスとクライアントクラスのコード変更も含まれます。"),"\n",a.createElement(n.h3,{id:"3-テストが困難",style:{position:"relative"}},a.createElement(n.a,{href:"#3-%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E5%9B%B0%E9%9B%A3","aria-label":"3 テストが困難 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"3. テストが困難"),"\n",a.createElement(n.p,null,"アプリケーションは電子メールサービスインスタンスを直接作成しているため、アプリケーションのテストは非常に困難です。\r\nテストクラスでこれらのオブジェクトをモックする方法はありません。"),"\n",a.createElement(n.h2,{id:"最初の代案",style:{position:"relative"}},a.createElement(n.a,{href:"#%E6%9C%80%E5%88%9D%E3%81%AE%E4%BB%A3%E6%A1%88","aria-label":"最初の代案 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"最初の代案"),"\n",a.createElement(n.p,null,"MyApplication に引数として電子メールサービスを必要とするコンストラクターを持つことで、\r\nクラスから電子メールサービスインスタンスの作成を削除できると主張することができます。"),"\n",a.createElement(n.h3,{id:"修正-myapplication-にサービスを注入するコンストラクタを追加",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BF%AE%E6%AD%A3-myapplication-%E3%81%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%82%92%E8%BF%BD%E5%8A%A0","aria-label":"修正 myapplication にサービスを注入するコンストラクタを追加 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"修正: MyApplication にサービスを注入するコンストラクタを追加"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.notdi;\r\n\r\npublic class MyApplication {\r\n\r\n    private EmailService email = null;\r\n\r\n    public MyApplication(EmailService service) {\r\n        this.email = service;\r\n    }\r\n\r\n    public void processMessages(String message, String receiver) {\r\n        // message のバリデーションやロジック操作などを行う\r\n        this.email.sendEmail(message, receiver);\r\n    }\r\n}\n")),"\n",a.createElement(n.p,null,"ただし、この場合、クライアントアプリケーションまたはテストクラスに電子メールサービスの初期化を依頼していますが、\r\nこれは設計上の適切な決定ではありません。"),"\n",a.createElement(n.h2,{id:"依存性の注入を取り入れる",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5%E3%82%92%E5%8F%96%E3%82%8A%E5%85%A5%E3%82%8C%E3%82%8B","aria-label":"依存性の注入を取り入れる permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性の注入を取り入れる"),"\n",a.createElement(n.p,null,"次に、依存性の注入パターンを適用して、上記の実装に関するすべての問題を解決する方法を見てみましょう。\r\nJava での依存性注入には、少なくとも次のものが必要です。"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"Service コンポーネント"),"\n",a.createElement(n.li,null,"Consumer クラス"),"\n",a.createElement(n.li,null,"Injector クラス"),"\n"),"\n",a.createElement(n.h3,{id:"service-コンポーネント",style:{position:"relative"}},a.createElement(n.a,{href:"#service-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88","aria-label":"service コンポーネント permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Service コンポーネント"),"\n",a.createElement(n.p,null,"サービスコンポーネントは、基本クラスまたはインターフェイスを使用して設計する必要があります。\r\nサービスのコントラクトを定義するインターフェイスまたは抽象クラスを優先することをお勧めします。"),"\n",a.createElement(n.h3,{id:"consumer-クラス",style:{position:"relative"}},a.createElement(n.a,{href:"#consumer-%E3%82%AF%E3%83%A9%E3%82%B9","aria-label":"consumer クラス permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Consumer クラス"),"\n",a.createElement(n.p,null,"コンシューマークラスは、サービスインターフェイスの観点から作成する必要があります。"),"\n",a.createElement(n.h3,{id:"injector-クラス",style:{position:"relative"}},a.createElement(n.a,{href:"#injector-%E3%82%AF%E3%83%A9%E3%82%B9","aria-label":"injector クラス permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Injector クラス"),"\n",a.createElement(n.p,null,"サービスを初期化し、次にコンシューマークラスを初期化するインジェクタークラス。"),"\n",a.createElement(n.h2,{id:"依存性注入1-service-コンポーネント",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E6%B3%A8%E5%85%A51-service-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88","aria-label":"依存性注入1 service コンポーネント permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性注入.1: Service コンポーネント"),"\n",a.createElement(n.p,null,"私たちの場合、MessageService サービス実装の契約を宣言することができます。"),"\n",a.createElement(n.h3,{id:"serviceimessageservicejava",style:{position:"relative"}},a.createElement(n.a,{href:"#serviceimessageservicejava","aria-label":"serviceimessageservicejava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"service/IMessageService.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.service;\r\n\r\npublic interface IMessageService {\r\n    void sendMessage(String message, String reciever);\r\n}\n")),"\n",a.createElement(n.p,null,"ここで、上記のインターフェースを実装する電子メールがあるとしましょう。"),"\n",a.createElement(n.h3,{id:"serviceemailserviceimpljava",style:{position:"relative"}},a.createElement(n.a,{href:"#serviceemailserviceimpljava","aria-label":"serviceemailserviceimpljava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"service/EmailServiceImpl.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},'package advanced.dependency.injection.di.service;\r\n\r\npublic class EmailServiceImpl implements IMessageService {\r\n\r\n    @Override\r\n    public void sendMessage(String message, String receiver) {\r\n        // メール送信のビジネスロジック\r\n        System.out.format(\r\n                "[Email] 送信先: %s, メッセージ: %s %n",\r\n                receiver, message\r\n            );\r\n    }\r\n }\n')),"\n",a.createElement(n.p,null,"同じく、SMS サービスも実装します。"),"\n",a.createElement(n.h3,{id:"servicesmsserviceimpljava",style:{position:"relative"}},a.createElement(n.a,{href:"#servicesmsserviceimpljava","aria-label":"servicesmsserviceimpljava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"service/SMSServiceImpl.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},'package advanced.dependency.injection.di.service;\r\n\r\npublic class SMSServiceImpl implements IMessageService {\r\n\r\n    @Override\r\n    public void sendMessage(String message, String reciever) {\r\n        // SMS 送信のビジネスロジック\r\n        System.out.format(\r\n                "[SMS] 送信先: %s, メッセージ: %s %n",\r\n                reciever, message\r\n            );\r\n    }\r\n}\n')),"\n",a.createElement(n.p,null,"依存性注入サービスの準備が整い、Consumer クラスを記述できるようになりました。"),"\n",a.createElement(n.h2,{id:"依存性注入2-service-consumer",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E6%B3%A8%E5%85%A52-service-consumer","aria-label":"依存性注入2 service consumer permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性注入.2: Service Consumer"),"\n",a.createElement(n.p,null,"Consumer クラスの基本インターフェイスは必須にはなりませんが、\r\nConsumer クラスの契約（取り決め）を宣言するインタフェースを用意します。"),"\n",a.createElement(n.h3,{id:"consumericonsumerjava",style:{position:"relative"}},a.createElement(n.a,{href:"#consumericonsumerjava","aria-label":"consumericonsumerjava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"consumer/IConsumer.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.consumer;\r\n\r\npublic interface IConsumer {\r\n    void processMessages(String message, String receiver);\r\n}\n")),"\n",a.createElement(n.p,null,"Consumer クラスの実装は次のようになります。"),"\n",a.createElement(n.h3,{id:"consumermydiapplicationjava",style:{position:"relative"}},a.createElement(n.a,{href:"#consumermydiapplicationjava","aria-label":"consumermydiapplicationjava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"consumer/MyDiApplication.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.consumer;\r\n\r\nimport advanced.dependency.injection.di.service.IMessageService;\r\n\r\npublic class MyDiApplication implements IConsumer {\r\n\r\n    private IMessageService service;\r\n\r\n    public MyDiApplication(IMessageService service) {\r\n        this.service = service;\r\n    }\r\n\r\n    @Override\r\n    public void processMessages(String message, String receiver) {\r\n\r\n        // message のバリデーション、操作ロジックなどを行う\r\n        this.service.sendMessage(message, receiver);\r\n    }\r\n}\n")),"\n",a.createElement(n.p,null,"アプリケーションクラスがサービスを使用していることに注意してください。\r\nより良い「関心の分離」につながるサービスは初期化されません。"),"\n",a.createElement(n.p,null,"また、サービスインタフェースを使用すると、MessageService をモックしてアプリケーションを簡単にテストし、\r\nコンパイル時ではなく実行時にサービスをバインドできます。"),"\n",a.createElement(n.p,null,"これで、サービスと Consumer クラスを初期化する依存性注入クラスを作成する準備が整いました。"),"\n",a.createElement(n.h2,{id:"依存性注入3-injector-クラス",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E6%B3%A8%E5%85%A53-injector-%E3%82%AF%E3%83%A9%E3%82%B9","aria-label":"依存性注入3 injector クラス permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性注入.3: Injector クラス"),"\n",a.createElement(n.p,null,"Consumer クラスを返すメソッド宣言を備えた MessageServiceInjector インタフェースを用意しましょう。"),"\n",a.createElement(n.h3,{id:"injectorimessageserviceinjectorjava",style:{position:"relative"}},a.createElement(n.a,{href:"#injectorimessageserviceinjectorjava","aria-label":"injectorimessageserviceinjectorjava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"injector/IMessageServiceInjector.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.injector;\r\n\r\nimport advanced.dependency.injection.di.consumer.IConsumer;\r\n\r\npublic interface IMessageServiceInjector {\r\n    public IConsumer getConsumer();\r\n}\n")),"\n",a.createElement(n.p,null,"これで、すべてのサービスについて、以下のような Injector クラスを作成する必要があります。"),"\n",a.createElement(n.h3,{id:"injectoremailserviceinjectorjava",style:{position:"relative"}},a.createElement(n.a,{href:"#injectoremailserviceinjectorjava","aria-label":"injectoremailserviceinjectorjava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"injector/EmailServiceInjector.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.injector;\r\n\r\nimport advanced.dependency.injection.di.consumer.IConsumer;\r\nimport advanced.dependency.injection.di.consumer.MyDiApplication;\r\nimport advanced.dependency.injection.di.service.EmailServiceImpl;\r\n\r\npublic class EmailServiceInjector implements IMessageServiceInjector {\r\n\r\n    @Override\r\n    public IConsumer getConsumer() {\r\n        return new MyDiApplication(new EmailServiceImpl());\r\n    }\r\n}\n")),"\n",a.createElement(n.h3,{id:"injectorsmsserviceinjectorjava",style:{position:"relative"}},a.createElement(n.a,{href:"#injectorsmsserviceinjectorjava","aria-label":"injectorsmsserviceinjectorjava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"injector/SMSServiceInjector.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.injector;\r\n\r\nimport advanced.dependency.injection.di.consumer.IConsumer;\r\nimport advanced.dependency.injection.di.consumer.MyDiApplication;\r\nimport advanced.dependency.injection.di.service.SMSServiceImpl;\r\n\r\npublic class SMSServiceInjector implements IMessageServiceInjector {\r\n    @Override\r\n    public IConsumer getConsumer() {\r\n        return new MyDiApplication(new SMSServiceImpl());\r\n    }\r\n}\n")),"\n",a.createElement(n.p,null,"次に、クライアントアプリケーションが単純なプログラムでアプリケーションをどのように使用するかを見てみましょう。"),"\n",a.createElement(n.h3,{id:"mymessageditestjava",style:{position:"relative"}},a.createElement(n.a,{href:"#mymessageditestjava","aria-label":"mymessageditestjava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"MyMessageDiTest.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},'package advanced.dependency.injection.di;\r\n\r\nimport advanced.dependency.injection.di.consumer.IConsumer;\r\nimport advanced.dependency.injection.di.injector.EmailServiceInjector;\r\nimport advanced.dependency.injection.di.injector.IMessageServiceInjector;\r\nimport advanced.dependency.injection.di.injector.SMSServiceInjector;\r\n\r\npublic class MyMessageDiTest {\r\n    public static void main(String[] args) {\r\n        String message  = "こんにちは、山本一郎さん！";\r\n        String email = "i_yamamoto@abc.com";\r\n        String phone = "";\r\n\r\n        IMessageServiceInjector injector = null;\r\n        IConsumer app = null;\r\n\r\n        injector = new EmailServiceInjector();\r\n        app = injector.getConsumer();\r\n        app.processMessages(message, email);\r\n\r\n        injector = new SMSServiceInjector();\r\n        app = injector.getConsumer();\r\n        app.processMessages(message, phone);\r\n\r\n    }\r\n}\n')),"\n",a.createElement(n.p,null,"この通り、Application クラスは Service の使用のみを担当しています。\r\nService クラスは Injector で作成されます。"),"\n",a.createElement(n.p,null,"また、Facebook メッセージングを許可するようにアプリケーションをさらに拡張する必要がある場合は、\r\nService クラスと Injector クラスのみを作成するだけで OK になりました。"),"\n",a.createElement(n.p,null,"そのため、依存性注入の実装により、ハードコードされた依存性の問題が解決され、\r\nアプリケーションを柔軟で簡単に拡張できるようになりました。"),"\n",a.createElement(n.p,null,"次に、Injector クラスと Service クラスをモックすることで、\r\nアプリケーションクラスを簡単にテストできるようになることを見てみましょう。"),"\n",a.createElement(n.h2,{id:"依存性注入4-junit-テストケース",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E6%B3%A8%E5%85%A54-junit-%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9","aria-label":"依存性注入4 junit テストケース permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性注入.4: JUnit テストケース"),"\n",a.createElement(n.p,null,"今回は、匿名クラスを使用して Injector クラスと Service クラスをモックしています。\r\nアプリケーションメソッドを簡単にテストできることが分かります。"),"\n",a.createElement(n.h3,{id:"testmydiapplicationjunittestjava",style:{position:"relative"}},a.createElement(n.a,{href:"#testmydiapplicationjunittestjava","aria-label":"testmydiapplicationjunittestjava permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"test/MyDiApplicationJUnitTest.java"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},'package advanced.dependency.injection.di.test;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport advanced.dependency.injection.di.consumer.IConsumer;\r\nimport advanced.dependency.injection.di.consumer.MyDiApplication;\r\nimport advanced.dependency.injection.di.injector.IMessageServiceInjector;\r\nimport advanced.dependency.injection.di.service.IMessageService;\r\n\r\npublic class MyDiApplicationJUnitTest {\r\n\r\n    private IMessageServiceInjector injector;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        // 匿名クラスで Injector をモックする\r\n\t\tinjector = new IMessageServiceInjector() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic IConsumer getConsumer() {\r\n\t\t\t\t// メッセージ Service をモックする\r\n\t\t\t\treturn new MyDiApplication(new IMessageService() {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void sendMessage(String message, String receiver) {\r\n\t\t\t\t\t\tSystem.out.format(\r\n\t\t\t\t\t\t\t    "[モック] 送信先: %s, メッセージ: %s %n",\r\n\t\t\t\t\t\t\t\treceiver, message\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n    }\r\n\r\n    @Test\r\n\tpublic void test() {\r\n\t\tIConsumer consumer = injector.getConsumer();\r\n\t\tconsumer.processMessages(\r\n\t\t\t\t"こんにちは、山本一郎さん！",\r\n\t\t\t\t"i_yamamoto@abc.com"\r\n\t\t\t);\r\n\t}\r\n\r\n\t@After\r\n\tpublic void tear(){\r\n\t\tinjector = null;\r\n\t}\r\n}\n')),"\n",a.createElement(n.p,null,"コンストラクタを使用してアプリケーションクラスに依存関係を注入しました。"),"\n",a.createElement(n.p,null,"別の方法として考えられるのは、setter メソッドを使用してアプリケーションクラスに依存関係を注入する方法です。\r\nsetter メソッドによる依存性注入の場合、アプリケーションクラスは次のように実装されます。"),"\n",a.createElement(n.h3,{id:"consumermydiapplicationjava-の依存性注入方法を-setter-にする",style:{position:"relative"}},a.createElement(n.a,{href:"#consumermydiapplicationjava-%E3%81%AE%E4%BE%9D%E5%AD%98%E6%80%A7%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95%E3%82%92-setter-%E3%81%AB%E3%81%99%E3%82%8B","aria-label":"consumermydiapplicationjava の依存性注入方法を setter にする permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"consumer/MyDiApplication.java の依存性注入方法を setter にする"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.consumer;\r\n\r\nimport advanced.dependency.injection.di.service.IMessageService;\r\n\r\npublic class MyDiApplication implements IConsumer {\r\n\r\n    private IMessageService service;\r\n\r\n    // setter による依存性の注入\r\n\tpublic void setService(IMessageService service) {\r\n\t\tthis.service = service;\r\n\t}\r\n\r\n    @Override\r\n    public void processMessages(String message, String receiver) {\r\n\r\n        // message のバリデーション、操作ロジックなどを行う\r\n        this.service.sendMessage(message, receiver);\r\n    }\r\n}\n")),"\n",a.createElement(n.p,null,"Injector のほうも、setter で依存性を注入するようにします。"),"\n",a.createElement(n.h3,{id:"injectoremailserviceinjectorjava-で-setter-で注入するように修正",style:{position:"relative"}},a.createElement(n.a,{href:"#injectoremailserviceinjectorjava-%E3%81%A7-setter-%E3%81%A7%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E4%BF%AE%E6%AD%A3","aria-label":"injectoremailserviceinjectorjava で setter で注入するように修正 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"injector/EmailServiceInjector.java で setter で注入するように修正"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"package advanced.dependency.injection.di.injector;\r\n\r\nimport advanced.dependency.injection.di.consumer.IConsumer;\r\nimport advanced.dependency.injection.di.consumer.MyDiApplication;\r\nimport advanced.dependency.injection.di.service.EmailServiceImpl;\r\n\r\npublic class EmailServiceInjector implements IMessageServiceInjector {\r\n\r\n    @Override\r\n    public IConsumer getConsumer() {\r\n        MyDiApplication app = new MyDiApplication();\r\n        app.setService(new EmailServiceImpl());\r\n        return app;\r\n    }\r\n}\n")),"\n",a.createElement(n.h2,{id:"コンストラクタで注入するかsetter-で注入するか",style:{position:"relative"}},a.createElement(n.a,{href:"#%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%A7%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B%E3%81%8Bsetter-%E3%81%A7%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B%E3%81%8B","aria-label":"コンストラクタで注入するかsetter で注入するか permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"コンストラクタで注入するか？setter で注入するか？"),"\n",a.createElement(n.p,null,"コンストラクターベースの依存性注入を使用するか、セッターベースを使用するかは設計上の決定であり、\r\n要件によって異なります。"),"\n",a.createElement(n.p,null,"たとえば、アプリケーションが Service クラスなしではまったく機能しない場合は、\r\nコンストラクターベースの DI を使用するか、setter メソッドベースの DI を使用して、本当に必要な場合にのみ使用します。"),"\n",a.createElement(n.p,null,"Java での依存性注入は、オブジェクトのバインドをコンパイル時から実行時に移動することにより、\r\nアプリケーションで制御の反転（IoC）を実現する方法です。"),"\n",a.createElement(n.p,null,"IoC は、ファクトリパターン、テンプレートメソッドデザインパターン、ストラテジーパターン、サービスロケーターパターンによっても実現できます。"),"\n",a.createElement(n.p,null,"制御の反転（IoC）については、"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators"}," Spring Dependency Injection "),"、\r\n",a.createElement(n.a,{href:"https://github.com/google/guice"}," Google Guice "),"、\r\nおよび ",a.createElement(n.a,{href:"https://docs.oracle.com/cd/E84527_01/wls/WLPRG/cdi.htm"}," Java EE CDI フレームワーク ")," は、\r\n",a.createElement(n.a,{href:"https://docs.oracle.com/javase/jp/8/docs/technotes/guides/reflection/enhancements.html"}," Java Reflection API ")," と\r\n",a.createElement(n.a,{href:"https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3#Java%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3"}," Java アノテーション ")," を使用して、\r\n依存性注入のプロセスを容易にします。"),"\n",a.createElement(n.p,null,"必要なのは、フィールド、コンストラクタ、または setter メソッドに注釈を付け、構成 xml ファイルまたはクラスでそれらを構成することだけです。"),"\n",a.createElement(n.h2,{id:"依存性注入のメリット",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E6%B3%A8%E5%85%A5%E3%81%AE%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88","aria-label":"依存性注入のメリット permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性注入のメリット"),"\n",a.createElement(n.p,null,"Java で依存性注入を使用するメリットは次のとおりです。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"関心事の分離"),"\n",a.createElement(n.li,null,"依存関係を初期化するためのすべての作業が Injector コンポーネントによって処理されるため、アプリケーションクラスのボイラープレートコードを削減できる"),"\n",a.createElement(n.li,null,"構成可能なコンポーネントにより、アプリケーションを簡単に拡張できます"),"\n",a.createElement(n.li,null,"モックオブジェクトで簡単にユニットテストを実行できる"),"\n"),"\n",a.createElement(n.h2,{id:"依存性注入のデメリット",style:{position:"relative"}},a.createElement(n.a,{href:"#%E4%BE%9D%E5%AD%98%E6%80%A7%E6%B3%A8%E5%85%A5%E3%81%AE%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88","aria-label":"依存性注入のデメリット permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"依存性注入のデメリット"),"\n",a.createElement(n.p,null,"依存性注入には、いくつか欠点もあります。"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"使いすぎると、変更の影響が実行時にわかっているため、メンテナンスの問題が発生する可能性がある"),"\n",a.createElement(n.li,null,"Java での依存性注入は、コンパイル時にキャッチされたであろうランタイムエラーにつながる可能性のある Service クラスの依存性を隠す"),"\n"),"\n",a.createElement(n.h2,{id:"まとめ",style:{position:"relative"}},a.createElement(n.a,{href:"#%E3%81%BE%E3%81%A8%E3%82%81","aria-label":"まとめ permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"まとめ"),"\n",a.createElement(n.p,null,"Service を管理する場合、Dependency Injection のメリット/デメリットを知り、実装方法を知ることで柔軟で堅牢なアプリケーションを設計することができます。"))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.RP)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)};function l(e){let{children:n}=e;return n}function s(e){return a.createElement(l,e,a.createElement(i,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-advanced-11-dependency-injection-mdx-a00c5f265829f093587f.js.map