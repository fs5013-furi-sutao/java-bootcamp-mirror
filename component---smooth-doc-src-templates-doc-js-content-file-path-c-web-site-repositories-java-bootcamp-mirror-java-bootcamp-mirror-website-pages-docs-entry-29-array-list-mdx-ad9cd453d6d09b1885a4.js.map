{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-entry-29-array-list-mdx-ad9cd453d6d09b1885a4.js","mappings":"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","sources":["webpack://website/./pages/docs/entry/29-array-list.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"29-java-のリストarraylist-クラス\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#29-java-%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88arraylist-%E3%82%AF%E3%83%A9%E3%82%B9\",\n    \"aria-label\": \"29 java のリストarraylist クラス permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"29. Java のリスト（ArrayList クラス）\"), \"\\n\", React.createElement(\"p\", {\n    className: \"goal\"\n  }, \"変長のリストとなるデータには配列ではなく、ArrayList\\r\\nのデータを使って処理を実装できるようになること。ArrayList は List\\r\\nインタフェースを実装していることを知る\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"学習\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AD%A6%E7%BF%92\",\n    \"aria-label\": \"学習 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"学習\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"java-のリストarraylist-クラスを知る\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#java-%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88arraylist-%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E7%9F%A5%E3%82%8B\",\n    \"aria-label\": \"java のリストarraylist クラスを知る permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Java のリスト（ArrayList クラス）を知る\"), \"\\n\", React.createElement(_components.p, null, \"リストは配列と同じように複数の値を格納することができるものです。\\r\\nただし、それぞれに特徴があります。一番大切な違いは配列が「固定長」で、リストが「可変長」であることです。\"), \"\\n\", React.createElement(_components.p, null, \"配列は一度要素数を決めると変更をすることができませんが、リストは自由に要素の追加・削除ができます。\"), \"\\n\", React.createElement(_components.p, null, \"これだけ読むと、自由が利くリストさえあれば配列は不要だと感じるかもしれません。\\r\\nしかし、そいうわけではありません。\\r\\nどちらにもメリット・デメリットがありますので、必要に応じて使い分けます。\"), \"\\n\", React.createElement(_components.p, null, \"両者の違いについてもっと詳しく知りたい場合はWebで調べてください。\\r\\n検索キーワードは、「 \", React.createElement(_components.a, {\n    href: \"https://www.google.com/search?q=java+%E9%85%8D%E5%88%97+ArrayList+%E9%81%95%E3%81%84\"\n  }, \"java 配列 ArrayList 違い\"), \" 」です。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"arraylistの初期化\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#arraylist%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96\",\n    \"aria-label\": \"arraylistの初期化 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"ArrayListの初期化\"), \"\\n\", React.createElement(_components.p, null, \"ArrayListを作る場合は次のように記述します。\\r\\nArrayListに赤線が表示されるはずですので、import文を追加しておきましょう。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"ArrayList<Integer> list = new ArrayList<Integer>();\\n\")), \"\\n\", React.createElement(_components.p, null, \"配列と同様にどんな種類の値を入れるかを初期化時に決める必要があります。\\r\\nデータ型は < > の中に記述をしますが、整数を入れたい場合は \", React.createElement(_components.code, null, \"int\"), \" ではなく \", React.createElement(_components.code, null, \"Integer\"), \" と記述をする必要があります。\"), \"\\n\", React.createElement(_components.p, null, \"Integerはint型のラッパークラスです。現時点ではあまり深く理解する必要はありませんが、byte、boolean、charなどにはそれぞれ対応するラッパークラスが存在します。\\r\\nArrayListを使う場合はそのラッパークラスを使う必要があるということだけを抑えておきましょう。\"), \"\\n\", React.createElement(_components.p, null, \"ラッパークラスの一覧を見たい場合はWebで調べてください。検索キーワードは、「 \", React.createElement(_components.a, {\n    href: \"https://www.google.com/search?q=java+%E3%83%A9%E3%83%83%E3%83%91%E3%83%BC%E3%82%AF%E3%83%A9%E3%82%B9\"\n  }, \"java ラッパークラス\"), \" 」です。\"), \"\\n\", React.createElement(_components.p, null, \"また、ArrayListを初期化する場合は、次のように左辺を \", React.createElement(_components.code, null, \"List\"), \" にすることもできます。\\r\\nなぜこのような書き方ができるかを理解するためにはオブジェクト指向の概念を理解する必要がありますので、現時点ではあまり深掘りせずに記述の仕方だけを覚えておきましょう。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"List<Integer> list = new ArrayList<Integer>();\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"要素を追加\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E8%A6%81%E7%B4%A0%E3%82%92%E8%BF%BD%E5%8A%A0\",\n    \"aria-label\": \"要素を追加 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"要素を追加\"), \"\\n\", React.createElement(_components.p, null, \"ArrayListに要素を追加する場合は、\", React.createElement(_components.code, null, \"add()\"), \" メソッドを使います。\\r\\n次のように記述をすると10、25、40をリストに追加することができます。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"List<Integer> list = new ArrayList<Integer>();\\r\\n\\r\\nlist.add(10);\\r\\nlist.add(25);\\r\\nlist.add(40);\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"arraylistの出力\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#arraylist%E3%81%AE%E5%87%BA%E5%8A%9B\",\n    \"aria-label\": \"arraylistの出力 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"ArrayListの出力\"), \"\\n\", React.createElement(_components.p, null, \"ArrayListの値を表示する場合は次のように書くことができます。\\r\\n要素を一つ取得して表示する場合は、\", React.createElement(_components.code, null, \"get()\"), \" メソッドを使います。\\r\\n引数としてインデックス（要素番号）を渡すことで要素の値を取得することができます。\"), \"\\n\", React.createElement(_components.p, null, \"また、\", React.createElement(_components.code, null, \"println()\"), \"などの出力メソッドにリスト名を直接記述することでリスト内の全ての要素をまとめて出力することができます。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"List<Integer> list = new ArrayList<Integer>();\\r\\n\\r\\nlist.add(10);\\r\\nlist.add(25);\\r\\nlist.add(40);\\r\\n\\r\\nSystem.out.printf(\\\"添え字を指定して要素を出力: %d \\\\n\\\", list.get(1));\\r\\n\\r\\nSystem.out.println(\\\"全ての要素を取得\\\");\\r\\nSystem.out.println(list);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\",\n    \"aria-label\": \"実行結果 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"添え字を指定して要素を出力: 25 \\r\\n全ての要素を取得\\r\\n[10, 25, 40]\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"要素の挿入\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E8%A6%81%E7%B4%A0%E3%81%AE%E6%8C%BF%E5%85%A5\",\n    \"aria-label\": \"要素の挿入 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"要素の挿入\"), \"\\n\", React.createElement(_components.p, null, \"ArrayListは最後尾に要素を追加するだけではなく、指定した位置に要素を挿入することもできます。\\r\\nリストの最後尾に要素を追加するときと同じように \", React.createElement(_components.code, null, \"add()\"), \" メソッドを使いますが、挿入時は挿入位置のインデックスも指定する必要があります。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"List<Integer> list = new ArrayList<Integer>();\\r\\n\\r\\nlist.add(10);\\r\\nlist.add(25);\\r\\nlist.add(40);\\r\\n\\r\\nSystem.out.println(\\\"挿入前の出力\\\");\\r\\nSystem.out.println(list);\\r\\n\\r\\nlist.add(2, 50);\\r\\n\\r\\nSystem.out.println(\\\"挿入後の出力\\\");\\r\\nSystem.out.println(list);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-1\",\n    \"aria-label\": \"実行結果 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"挿入前の出力\\r\\n[10, 25, 40]\\r\\n挿入後の出力\\r\\n[10, 25, 50, 40]\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"要素の削除\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E8%A6%81%E7%B4%A0%E3%81%AE%E5%89%8A%E9%99%A4\",\n    \"aria-label\": \"要素の削除 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"要素の削除\"), \"\\n\", React.createElement(_components.p, null, \"ArrayListから要素を削除する場合は、\", React.createElement(_components.code, null, \"remove()\"), \" メソッドを使います。\\r\\n引数としてインデックスを渡すことで要素を削除することができます。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"List<Integer> list = new ArrayList<Integer>();\\r\\n\\r\\nlist.add(10);\\r\\nlist.add(25);\\r\\nlist.add(40);\\r\\n\\r\\nSystem.out.println(\\\"削除前の出力\\\");\\r\\nSystem.out.println(list);\\r\\n\\r\\nlist.remove(1);\\r\\n\\r\\nSystem.out.println(\\\"削除後の出力\\\");\\r\\nSystem.out.println(list);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-2\",\n    \"aria-label\": \"実行結果 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"削除前の出力\\r\\n[10, 25, 40]\\r\\n削除後の出力\\r\\n[10, 40]\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"要素の上書き\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E8%A6%81%E7%B4%A0%E3%81%AE%E4%B8%8A%E6%9B%B8%E3%81%8D\",\n    \"aria-label\": \"要素の上書き permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"要素の上書き\"), \"\\n\", React.createElement(_components.p, null, \"ArrayListの要素の値を上書きする場合は、\", React.createElement(_components.code, null, \"set()\"), \" メソッドを使います。\\r\\n引数として、上書きしたい要素のインデックスと設定したい値を渡すことで上書きをすることができます。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"List<Integer> list = new ArrayList<Integer>();\\r\\n\\r\\nlist.add(10);\\r\\nlist.add(25);\\r\\nlist.add(40);\\r\\n\\r\\nSystem.out.println(\\\"上書き前の出力\\\");\\r\\nSystem.out.println(list);\\r\\n\\r\\nlist.set(1, 50);\\r\\n\\r\\nSystem.out.println(\\\"上書き後の出力\\\");\\r\\nSystem.out.println(list);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果-3\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-3\",\n    \"aria-label\": \"実行結果 3 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"上書き前の出力\\r\\n[10, 25, 40]\\r\\n上書き後の出力\\r\\n[10, 50, 40]\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"要素の検索\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E8%A6%81%E7%B4%A0%E3%81%AE%E6%A4%9C%E7%B4%A2\",\n    \"aria-label\": \"要素の検索 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"要素の検索\"), \"\\n\", React.createElement(_components.p, null, \"ArrayListには要素の検索をする機能もあります。\\r\\nリストの先頭から確認し、指定した値と最初に一致する要素のインデックスを返す \", React.createElement(_components.code, null, \"indexOf()\"), \" メソッドと最後に一致する要素のインデックスを返す \", React.createElement(_components.code, null, \"lastIndexOf()\"), \" メソッドがあります。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"List<Integer> list = new ArrayList<Integer>();\\r\\n\\r\\nlist.add(10);\\r\\nlist.add(25);\\r\\nlist.add(40);\\r\\nlist.add(20);\\r\\nlist.add(25);\\r\\n\\r\\nSystem.out.printf(\\\"25が最初に一致したのは %d 番目の要素 \\\\n\\\", list.indexOf(25));\\r\\nSystem.out.printf(\\\"25が最後に一致したのは %d 番目の要素 \\\\n\\\", list.lastIndexOf(25));\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果-4\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-4\",\n    \"aria-label\": \"実行結果 4 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"25が最初に一致したのは 1 番目の要素 \\r\\n25が最後に一致したのは 4 番目の要素\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/WebSiteRepositories/JavaBootcampMirror/java-bootcamp-mirror/website/pages/docs/entry/29-array-list.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","h2","h3","p","pre","code","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","DocTemplate","_ref","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}