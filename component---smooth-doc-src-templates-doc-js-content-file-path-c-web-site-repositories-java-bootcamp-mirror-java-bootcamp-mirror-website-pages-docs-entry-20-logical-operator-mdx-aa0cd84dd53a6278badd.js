"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5045],{70966:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var r=t(63696),a=t(43023);function i(e){const n=Object.assign({h1:"h1",a:"a",div:"div",h2:"h2",h3:"h3",p:"p",pre:"pre",code:"code"},(0,a.RP)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.h1,{id:"20-java-の論理演算子",style:{position:"relative"}},r.createElement(n.a,{href:"#20-java-%E3%81%AE%E8%AB%96%E7%90%86%E6%BC%94%E7%AE%97%E5%AD%90","aria-label":"20 java の論理演算子 permalink",className:"anchor before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"20. Java の論理演算子"),"\n",r.createElement("p",{className:"goal"},"論理演算子をコーディングできること。論理演算子による演算結果が、true / false\r\nになることが理解できていること。短絡評価（ショートサーキット）の挙動を把握していること"),"\n",r.createElement(n.h2,{id:"学習",style:{position:"relative"}},r.createElement(n.a,{href:"#%E5%AD%A6%E7%BF%92","aria-label":"学習 permalink",className:"anchor before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"学習"),"\n",r.createElement(n.h3,{id:"算術演算子の表し方を知る",style:{position:"relative"}},r.createElement(n.a,{href:"#%E7%AE%97%E8%A1%93%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E8%A1%A8%E3%81%97%E6%96%B9%E3%82%92%E7%9F%A5%E3%82%8B","aria-label":"算術演算子の表し方を知る permalink",className:"anchor before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"算術演算子の表し方を知る"),"\n",r.createElement(n.p,null,"Java で論理演算子（ | , & ）を使う方法を Web で調べてください。検索キーワードは、「 ",r.createElement(n.a,{href:"https://www.google.com/search?q=java+%E8%AB%96%E7%90%86%E6%BC%94%E7%AE%97%E5%AD%90"},"java 論理演算子")," 」です。"),"\n",r.createElement(n.h2,{id:"で論理演算子-----の使い方",style:{position:"relative"}},r.createElement(n.a,{href:"#%E3%81%A7%E8%AB%96%E7%90%86%E6%BC%94%E7%AE%97%E5%AD%90-----%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9","aria-label":"で論理演算子     の使い方 permalink",className:"anchor before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"で論理演算子（ | , & ） の使い方"),"\n",r.createElement(n.p,null,"以下は来店時間を入力すると、お店が営業時間中か営業時間外かを表示するプログラムです。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-java"},'import java.util.Scanner;\r\n\r\npublic class WithoutLogicalOperator {\r\n    public static void main(String[] main) {\r\n        Scanner stdin = new Scanner(System.in);\r\n        \r\n        int openTime = 10;\r\n        int closeTime = 18;\r\n\r\n        System.out.print("来店時間を入力：");\r\n        int visitTime = stdin.nextInt();\r\n\r\n        if(visitTime >= openTime){\r\n            if(visitTime <= closeTime){\r\n                System.out.println("営業時間中です.");\r\n            }\r\n        }\r\n\r\n        if(visitTime < openTime){\r\n            System.out.println("営業時間外です.");\r\n        }\r\n\r\n        if(visitTime > closeTime){\r\n            System.out.println("営業時間外です.");\r\n        }\r\n        stdin.close();\r\n    }\r\n}\n')),"\n",r.createElement(n.p,null,r.createElement(n.code,null,"営業時間中です."),"というメッセージは記述した2つの条件のどちらにも当てはまる場合に表示し、",r.createElement(n.code,null,"営業時間外です."),"のメッセージは記述した2つの条件のどちらかに当てはまる場合に表示しています。"),"\n",r.createElement(n.p,null,"このプログラムを論理演算子を使って書き換えると次のようになります。"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-java"},'import java.util.Scanner;\r\n\r\npublic class WithLogicalOperator {\r\n    public static void main(String[] main) {\r\n        Scanner stdin = new Scanner(System.in);\r\n        \r\n        int openTime = 10;\r\n        int closeTime = 18;\r\n\r\n        System.out.print("来店時間を入力：");\r\n        int visitTime = stdin.nextInt();\r\n\r\n        if(visitTime >= openTime && visitTime <= closeTime){\r\n            System.out.println("営業時間中です.");\r\n        }\r\n\r\n        if(visitTime < openTime || visitTime > closeTime){\r\n            System.out.println("営業時間外です.");\r\n        }\r\n        stdin.close();\r\n    }\r\n}\r\n\n')),"\n",r.createElement(n.p,null,"このように論理演算子を使うことでプログラムが書きやすくなります。"),"\n",r.createElement(n.p,null,"次に、短絡評価（ショートサーキット）についても調べてください。検索キーワードは、「 ",r.createElement(n.a,{href:"https://www.google.com/search?q=java+%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%B5%E3%83%BC%E3%82%AD%E3%83%83%E3%83%88"},"java ショートサーキット")," 」です。"),"\n",r.createElement(n.h2,{id:"練習問題-01時間-20-分",style:{position:"relative"}},r.createElement(n.a,{href:"#%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C-01%E6%99%82%E9%96%93-20-%E5%88%86","aria-label":"練習問題 01時間 20 分 permalink",className:"anchor before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"練習問題 01:（時間: 20 分）"),"\n",r.createElement(n.p,null,"以下のクラス ShortCircuit について、2 つの if 文、それぞれの上部に書かれたコメントの挙動となるように、条件式中の「?」を論理演算子に置き換えなさい"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-java",meta:"title=src/ShortCircuit.java"},'public class ShortCircuit {\r\n    public static void main(String[] args) {\r\n\r\n        String str = null;\r\n\r\n        // 必ず getTrue() メソッドが実行されないように\r\n        // ショートサーキットとなるように ? を論理演算子で置き換えなさい\r\n        if (str != null ? getTrue()) {\r\n            System.out.println("1 つ目の if 文の中に入りました.");\r\n        }\r\n\r\n        // getFalse() メソッドが実行されないように\r\n        // ショートサーキットとなるように ? を論理演算子で置き換えなさい\r\n        if (str == null ? getFalse()) {\r\n            System.out.println("2 つ目の if 文の中に入りました.");\r\n        }\r\n    }\r\n\r\n    public static boolean getTrue() {\r\n        System.out.println("getTrue() を実行しました.");\r\n        return true;\r\n    }\r\n\r\n    public static boolean getFalse() {\r\n        System.out.println("getFalse() を実行しました.");\r\n        return false;\r\n    }\r\n}\n')),"\n",r.createElement(n.h3,{id:"shortcircuit-の実行結果",style:{position:"relative"}},r.createElement(n.a,{href:"#shortcircuit-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C","aria-label":"shortcircuit の実行結果 permalink",className:"anchor before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"ShortCircuit の実行結果"),"\n",r.createElement(n.pre,null,r.createElement(n.code,null,"2 つ目の if 文の中に入りました.\n")),"\n",r.createElement(n.h2,{id:"解答例",style:{position:"relative"}},r.createElement(n.a,{href:"#%E8%A7%A3%E7%AD%94%E4%BE%8B","aria-label":"解答例 permalink",className:"anchor before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"解答例"),"\n",r.createElement(n.p,null,r.createElement(n.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/20.logical-operator/src/ShortCircuit.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/20.logical-operator/src/ShortCircuit.java")))}var l=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.RP)(),e.components);return n?r.createElement(n,e,r.createElement(i,e)):i(e)};function c(e){let{children:n}=e;return n}function s(e){return r.createElement(c,e,r.createElement(l,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-entry-20-logical-operator-mdx-aa0cd84dd53a6278badd.js.map