"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1698],{49512:function(e,a,n){n.r(a),n.d(a,{default:function(){return i}});var t=n(63696),r=n(43023);function l(e){const a=Object.assign({h1:"h1",a:"a",div:"div",h2:"h2",h3:"h3",p:"p",h4:"h4",ol:"ol",li:"li",pre:"pre",code:"code",br:"br",ul:"ul",h5:"h5",img:"img"},(0,r.RP)(),e.components);return t.createElement(t.Fragment,null,t.createElement(a.h1,{id:"04-java-の-abstract-クラスメソッド",style:{position:"relative"}},t.createElement(a.a,{href:"#04-java-%E3%81%AE-abstract-%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89","aria-label":"04 java の abstract クラスメソッド permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"04. Java の abstract クラス・メソッド"),"\n",t.createElement("p",{className:"goal"},"匿名クラスとは何かが分かり、匿名クラスを実装できるようになること"),"\n",t.createElement(a.h2,{id:"学習",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%AD%A6%E7%BF%92","aria-label":"学習 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"学習"),"\n",t.createElement(a.h3,{id:"abstract-クラスabstract-メソッドを知る",style:{position:"relative"}},t.createElement(a.a,{href:"#abstract-%E3%82%AF%E3%83%A9%E3%82%B9abstract-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E7%9F%A5%E3%82%8B","aria-label":"abstract クラスabstract メソッドを知る permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"abstract クラス、abstract メソッドを知る"),"\n",t.createElement(a.p,null,"abstract クラス、abstract メソッドとは何かを Web で調べてください。\r\n検索キーワードは、「 ",t.createElement(a.a,{href:"https://www.google.com/search?q=java+abstract"},"java abstract")," 」です。\r\n3 種類ぐらい説明記事やサンプルコードを読んで、abstract クラス、abstract メソッドとは何か、その使い方をつかみましょう。"),"\n",t.createElement(a.h3,{id:"抽象クラス",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9","aria-label":"抽象クラス permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"抽象クラス"),"\n",t.createElement(a.p,null,"abstract クラスは、抽象クラスとも呼ばれます。"),"\n",t.createElement(a.p,null,"抽象クラスとは、抽象的に宣言されたクラスのことで、\r\n抽象的なメソッドを含んでいてもよいし、含んでいなくてもよいという意味です。"),"\n",t.createElement(a.p,null,"抽象クラスはインスタンス化できませんが、サブクラス化は可能です。"),"\n",t.createElement(a.h4,{id:"抽象クラスの定義ルール",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%83%AB%E3%83%BC%E3%83%AB","aria-label":"抽象クラスの定義ルール permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"抽象クラスの定義ルール"),"\n",t.createElement(a.p,null,"Java で抽象クラスを定義する場合のルールをまとめておきます。"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"抽象クラスは直接インスタンス化することはできない"),"\n",t.createElement(a.li,null,"抽象クラスは、ゼロ以上の任意の数の抽象メソッド、および具象メソッドを定義することができる"),"\n",t.createElement(a.li,null,"抽象クラスは、private または final として定義することはできない"),"\n",t.createElement(a.li,null,"別の抽象クラスを拡張した抽象クラスは、その抽象メソッドがすべて自分の抽象メソッドとして継承される"),"\n",t.createElement(a.li,null,"ある抽象クラスを継承する最初の具象クラスは、継承したすべての抽象メソッドの実装しなければならない"),"\n"),"\n",t.createElement(a.h4,{id:"抽象クラスの定義例",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9A%E7%BE%A9%E4%BE%8B","aria-label":"抽象クラスの定義例 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"抽象クラスの定義例"),"\n",t.createElement(a.p,null,"では、実際の抽象クラスを使ってみます。"),"\n",t.createElement(a.h4,{id:"abstractclassdemojava",style:{position:"relative"}},t.createElement(a.a,{href:"#abstractclassdemojava","aria-label":"abstractclassdemojava permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"AbstractClassDemo.java"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},'package advanced.abstracts.demo;\r\n\r\npublic class AbstractClassDemo {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Animal cat = new Cat("ドラネコ");\r\n        cat.eat();\r\n        cat.sound();\r\n\r\n        Animal dog = new Dog("ポチ");\r\n        dog.eat();\r\n        dog.sound();\r\n    }\r\n}\r\n\r\nabstract class Animal {\r\n\r\n    private String name;\r\n\r\n    protected Animal(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // 継承するすべてのクラスが持つ標準のメソッド\r\n    public void eat() {\r\n        System.out.format(\r\n                "%s が食べる .......... %n", this.name\r\n            );\r\n    }\r\n\r\n    // 継承するクラスに実装を強制する\r\n    abstract void sound();\r\n}\r\n\r\nclass Cat extends Animal {\r\n\r\n    public Cat(String name) {\r\n        super(name);\r\n    }\r\n\r\n    @Override\r\n    void sound() {\r\n        System.out.println("にゃあ にゃあ ........");\r\n    }\r\n}\r\n\r\nclass Dog extends Animal {\r\n\r\n    public Dog(String name) {\r\n        super(name);\r\n    }\r\n\r\n    @Override\r\n    void sound() {\r\n        System.out.println("わん わん ........");\r\n    }\r\n}\n')),"\n",t.createElement(a.h4,{id:"abstractclassdemojava-の実行結果",style:{position:"relative"}},t.createElement(a.a,{href:"#abstractclassdemojava-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C","aria-label":"abstractclassdemojava の実行結果 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"AbstractClassDemo.java の実行結果"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-console"},"ドラネコ が食べる ..........\r\nにゃあ にゃあ ........\r\nポチ が食べる ..........\r\nわん わん ........\n")),"\n",t.createElement(a.p,null,"抽象クラスの定義例",t.createElement(a.br),"\n",t.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/demo/AbstractClassDemo.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/demo/AbstractClassDemo.java")),"\n",t.createElement(a.h3,{id:"抽象メソッド",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%8A%BD%E8%B1%A1%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89","aria-label":"抽象メソッド permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"抽象メソッド"),"\n",t.createElement(a.p,null,"abstract メソッドは、抽象メソッドとも呼ばれます。\r\n抽象メソッドとは、具体的な処理を実装をせずに宣言されたメソッドのことです。"),"\n",t.createElement(a.h4,{id:"抽象メソッドの定義ルール",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%8A%BD%E8%B1%A1%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%83%AB%E3%83%BC%E3%83%AB","aria-label":"抽象メソッドの定義ルール permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"抽象メソッドの定義ルール"),"\n",t.createElement(a.p,null,"Java で抽象メソッドを定義する場合のルールをまとめておきます。"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"クラスに抽象メソッドが含まれている場合は、クラス自体が抽象宣言されていなければならない"),"\n",t.createElement(a.li,null,"抽象メソッドは、抽象クラスでのみ定義できる"),"\n",t.createElement(a.li,null,"抽象メソッドは、private または final として宣言することはできない"),"\n",t.createElement(a.li,null,"抽象メソッドは、宣言された抽象クラスでメソッドの具体的な処理を実装できない"),"\n",t.createElement(a.li,null,"サブクラスでの抽象メソッドの実装は、メソッドをオーバーライドする場合と同じルールに従う"),"\n"),"\n",t.createElement(a.h4,{id:"抽象クラスをサブクラス化する場合",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E3%82%B5%E3%83%96%E3%82%AF%E3%83%A9%E3%82%B9%E5%8C%96%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88","aria-label":"抽象クラスをサブクラス化する場合 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"抽象クラスをサブクラス化する場合"),"\n",t.createElement(a.p,null,"サブクラスは通常、親クラスのすべての抽象メソッドを実装しなければいけません。\r\nしかし、サブクラスも抽象クラスである場合、親クラスの抽象メソッドは、サブクラスでも抽象化しなければなりません。"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},"/**\r\n * 哺乳類をあらわす抽象クラス\r\n */\r\nabstract class Mamal {\r\n    abstract void sound();\r\n}\r\n\r\nabstract class Animal extends Mamal {\r\n\r\n    @Override\r\n    abstract void sound();\r\n}\n")),"\n",t.createElement(a.h4,{id:"抽象クラスがインタフェースを実装する場合",style:{position:"relative"}},t.createElement(a.a,{href:"#%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%8C%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88","aria-label":"抽象クラスがインタフェースを実装する場合 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"抽象クラスがインタフェースを実装する場合"),"\n",t.createElement(a.p,null,"インタフェースを実装したクラスを作成する場合、インタフェースのメソッドをすべて実装しなければなりません。"),"\n",t.createElement(a.p,null,"しかし、クラスが抽象クラスであれば、インタフェースのメソッドをすべて実装することは強制されません。"),"\n",t.createElement(a.h5,{id:"abstractimplementsinterfacedemojava",style:{position:"relative"}},t.createElement(a.a,{href:"#abstractimplementsinterfacedemojava","aria-label":"abstractimplementsinterfacedemojava permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"AbstractImplementsInterfaceDemo.java"),"\n",t.createElement(a.p,null,"インタフェースを実装する抽象クラスを例で見てみます。"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},'package advanced.abstracts.interf;\r\n\r\ninterface SuperInterface {\r\n    void a();\r\n\r\n    void b();\r\n\r\n    void c();\r\n\r\n    void d();\r\n}\r\n\r\nabstract class AbstractClassImplementsInterface\r\n        implements SuperInterface {\r\n\r\n    public void a() {\r\n        System.out.println("I am a");\r\n    }\r\n}\r\n\r\nclass ConcreteClass\r\n        extends AbstractClassImplementsInterface {\r\n\r\n    public void b() {\r\n        System.out.println("I am b");\r\n    }\r\n\r\n    public void c() {\r\n        System.out.println("I am c");\r\n    }\r\n\r\n    public void d() {\r\n        System.out.println("I am d");\r\n    }\r\n}\r\n\r\npublic class AbstractImplementsInterfaceDemo {\r\n\r\n    public static void main(String args[]) {\r\n\r\n        final SuperInterface concrete =\r\n            new ConcreteClass();\r\n\r\n        concrete.a();\r\n        concrete.b();\r\n        concrete.c();\r\n        concrete.d();\r\n    }\r\n}\n')),"\n",t.createElement(a.p,null,"抽象クラスがインタフェースを実装する場合",t.createElement(a.br),"\n",t.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/interf/AbstractImplementsInterfaceDemo.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/interf/AbstractImplementsInterfaceDemo.java")),"\n",t.createElement(a.h2,{id:"実プロジェクトでの抽象クラスの使用例",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%AE%9F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A7%E3%81%AE%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B","aria-label":"実プロジェクトでの抽象クラスの使用例 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"実プロジェクトでの抽象クラスの使用例"),"\n",t.createElement(a.h3,{id:"従業員契約社員正社員の例",style:{position:"relative"}},t.createElement(a.a,{href:"#%E5%BE%93%E6%A5%AD%E5%93%A1%E5%A5%91%E7%B4%84%E7%A4%BE%E5%93%A1%E6%AD%A3%E7%A4%BE%E5%93%A1%E3%81%AE%E4%BE%8B","aria-label":"従業員契約社員正社員の例 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"従業員/契約社員/正社員の例"),"\n",t.createElement(a.p,null,t.createElement(a.img,{src:"./er_diagram_employee.png",alt:"ER図"})),"\n",t.createElement(a.p,null,"この例では、抽象的な Employee クラスを作成し、そのクラスには 抽象メソッド calculateSalary() が含まれています。\r\nそしてサブクラスが Employee クラスを拡張して、calculateSalary() メソッドを実装します。"),"\n",t.createElement(a.p,null,"サブクラスは、Contractor クラス（正社員）と FullTimeEmployee クラス（正社員）です。"),"\n",t.createElement(a.p,null,"契約社員と正社員の給与構造が異なることを知っているので、これらのクラスをオーバーライドして calculateSalary() メソッドを実装します。"),"\n",t.createElement(a.h3,{id:"step-1-employee-抽象クラス",style:{position:"relative"}},t.createElement(a.a,{href:"#step-1-employee-%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9","aria-label":"step 1 employee 抽象クラス permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Step 1: Employee 抽象クラス"),"\n",t.createElement(a.p,null,"まず、Employee という名前の抽象スーパークラスを作成してみましょう。"),"\n",t.createElement(a.p,null,"この抽象クラスの Employee に、calculateSalary()というメソッドを抽象メソッドとして定義します。\r\nつまり、このメソッドは抽象化されているので、このメソッドの実装は Employee クラスの継承者に任せることができます。"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},"package advanced.abstracts.employee.entity;\r\n\r\npublic abstract class Employee {\r\n\r\n    private String name;\r\n    private int paymentPerHour;\r\n\r\n    protected Employee(String name, int paymentPerHour) {\r\n         this.name = name;\r\n         this.paymentPerHour = paymentPerHour;\r\n    }\r\n\r\n    public abstract int calculateSalary();\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n    public int getPaymentPerHour() {\r\n       return paymentPerHour;\r\n    }\r\n    public void setPaymentPerHour(int paymentPerHour) {\r\n        this.paymentPerHour = paymentPerHour;\r\n    }\r\n}\n")),"\n",t.createElement(a.h3,{id:"step-2-contractor-具象クラス",style:{position:"relative"}},t.createElement(a.a,{href:"#step-2-contractor-%E5%85%B7%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9","aria-label":"step 2 contractor 具象クラス permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Step 2: Contractor 具象クラス"),"\n",t.createElement(a.p,null,"Contractor クラスは、親の Employee からすべてのプロパティを継承しますが、\r\ncalculateSalary() メソッドには独自の実装を提供する必要があります。\r\nこの場合、与えられた労働時間に時間当たりの支払いの値を乗算します。"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},"package advanced.abstracts.employee.entity;\r\n\r\npublic class Contractor extends Employee {\r\n \r\n    private int workingHours;\r\n\r\n    public Contractor(\r\n            String name, int paymentPerHour, int workingHours) {\r\n\r\n        super(name, paymentPerHour);\r\n        this.workingHours = workingHours;\r\n    }\r\n\r\n    @Override\r\n    public int calculateSalary() {\r\n        return getPaymentPerHour() * workingHours;\r\n    }\r\n}\r\n\n")),"\n",t.createElement(a.h3,{id:"step-3-fulltimeemployee-具象クラス",style:{position:"relative"}},t.createElement(a.a,{href:"#step-3-fulltimeemployee-%E5%85%B7%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9","aria-label":"step 3 fulltimeemployee 具象クラス permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Step 3: FullTimeEmployee 具象クラス"),"\n",t.createElement(a.p,null,"FullTimeEmployee には computeSalary() メソッドの独自の実装があります。\r\nこの場合は、8 時間という定数値（定時:REGULAR_TIME）を乗算するだけです。"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},"package advanced.abstracts.employee.entity;\r\n\r\npublic class FullTimeEmployee extends Employee {\r\n\r\n    private static final int REGULAR_TIME = 8;\r\n\r\n    public FullTimeEmployee(\r\n            String name, int paymentPerHour) {\r\n\r\n        super(name, paymentPerHour);\r\n    }\r\n\r\n    @Override\r\n    public int calculateSalary() {\r\n        return getPaymentPerHour() * REGULAR_TIME;\r\n    }\r\n}\n")),"\n",t.createElement(a.h3,{id:"step-4-抽象クラスの動作確認",style:{position:"relative"}},t.createElement(a.a,{href:"#step-4-%E6%8A%BD%E8%B1%A1%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D","aria-label":"step 4 抽象クラスの動作確認 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Step 4: 抽象クラスの動作確認"),"\n",t.createElement(a.p,null,"抽象クラスをテストするデモクラスを実行してみます。"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},'package advanced.abstracts.employee;\r\n\r\nimport advanced.abstracts.employee.entity.Contractor;\r\nimport advanced.abstracts.employee.entity.Employee;\r\nimport advanced.abstracts.employee.entity.FullTimeEmployee;\r\n\r\npublic class AbstractClassDemo {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Employee[] employees = {\r\n                new Contractor("契約社員の山本一郎", 1000, 10),\r\n                new FullTimeEmployee("正社員の山田太郎", 800),\r\n        };\r\n\r\n        for (Employee employee : employees) {\r\n\r\n            System.out.format(\r\n                    "[%s] 給料: %d 円 %n",\r\n                    employee.getName(),\r\n                    employee.calculateSalary()\r\n                );\r\n        }\r\n    }\r\n}\n')),"\n",t.createElement(a.h4,{id:"abstractclassdemojava-の実行結果-1",style:{position:"relative"}},t.createElement(a.a,{href:"#abstractclassdemojava-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-1","aria-label":"abstractclassdemojava の実行結果 1 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"AbstractClassDemo.java の実行結果"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-console"},"[契約社員の山本一郎] 給料: 10000 円\r\n[正社員の山田太郎] 給料: 6400 円\n")),"\n",t.createElement(a.p,null,"従業員/契約社員/正社員での抽象クラスの例",t.createElement(a.br),"\n",t.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/interf/AbstractImplementsInterfaceDemo.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/interf/AbstractImplementsInterfaceDemo.java")),"\n",t.createElement(a.h2,{id:"まとめ",style:{position:"relative"}},t.createElement(a.a,{href:"#%E3%81%BE%E3%81%A8%E3%82%81","aria-label":"まとめ permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"まとめ"),"\n",t.createElement(a.p,null,"最後に抽象クラスの概略をまとめます。"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"抽象クラスとは、抽象キーワードで宣言されたクラスのこと"),"\n",t.createElement(a.li,null,"抽象メソッドとは、実装を持たずに宣言されたメソッドのこと"),"\n",t.createElement(a.li,null,"抽象クラスはすべての抽象メソッドを持っていても良いが、持っていなくても良い。その中には、具体的なメソッドになるものもある"),"\n",t.createElement(a.li,null,"抽象的に定義されたメソッドは、常にサブクラス内で再定義されなければならないので、オーバーライドが必須になるか、サブクラス自体を抽象化しなければならない"),"\n",t.createElement(a.li,null,"1 つ以上の抽象メソッドを含むクラスは、抽象キーワードで宣言しなければならない"),"\n",t.createElement(a.li,null,"抽象クラスのオブジェクトは存在しない。つまり、抽象クラスは、new 演算子を使って直接インスタンス化することはできない"),"\n",t.createElement(a.li,null,"抽象クラスはパラメータ化されたコンストラクタを持つことができ、デフォルトのコンストラクタは常に抽象クラスに存在する"),"\n"),"\n",t.createElement(a.h2,{id:"練習問題時間-20-分",style:{position:"relative"}},t.createElement(a.a,{href:"#%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C%E6%99%82%E9%96%93-20-%E5%88%86","aria-label":"練習問題時間 20 分 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"練習問題（時間: 20 分）"),"\n",t.createElement(a.p,null,"次のクラス PetShop を実行すると、実行結果の通りになるように次の 3 つのクラスと 1 つのインタフェースを作成しなさい"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"Barkable.java 鳴く能力をあらわすインタフェース"),"\n",t.createElement(a.li,null,"Animal.java 動物をあらわす抽象クラス"),"\n",t.createElement(a.li,null,"Cat.java ネコクラス"),"\n",t.createElement(a.li,null,"Rabbit.java ウサギクラス"),"\n"),"\n",t.createElement(a.h3,{id:"petshopjava",style:{position:"relative"}},t.createElement(a.a,{href:"#petshopjava","aria-label":"petshopjava permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"PetShop.java"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-java"},'package advanced.abstracts.animal;\r\n\r\nimport advanced.abstracts.animal.entity.Animal;\r\nimport advanced.abstracts.animal.entity.Barkable;\r\nimport advanced.abstracts.animal.entity.Cat;\r\nimport advanced.abstracts.animal.entity.Rabbit;\r\n\r\npublic class PetShop {\r\n\r\n    private static final boolean MALE = true;\r\n    private static final boolean FEMALE = false;\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Animal[] pets = {\r\n                new Rabbit(\r\n                        "スキウサギ",\r\n                        FEMALE\r\n                    ),\r\n\r\n                new Cat(\r\n                        "どらねこ",\r\n                        MALE\r\n                    ),\r\n            };\r\n\r\n        for (Animal pet : pets) {\r\n            System.out.println(pet.toString());\r\n            pet.eat();\r\n            pet.bark();\r\n            System.out.println();\r\n        }\r\n\r\n        pets[0].changeName("ツキウサギ");\r\n        System.out.println(pets[0].toString());\r\n        pets[0].eat();\r\n\r\n        Barkable rabbit = pets[0];\r\n        rabbit.bark();\r\n    }\r\n}\n')),"\n",t.createElement(a.h3,{id:"petshopjava-の実行結果",style:{position:"relative"}},t.createElement(a.a,{href:"#petshopjava-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C","aria-label":"petshopjava の実行結果 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"PetShop.java の実行結果"),"\n",t.createElement(a.pre,null,t.createElement(a.code,{className:"language-console"},"名前=スキウサギ::性別=メス::食性=草食\r\nスキウサギ は 草食 ........草を食べた ........\r\nみゅー みゅー ........\r\n\r\n名前=どらねこ::性別=オス::食性=肉食\r\nどらねこ は 肉食 ........魚を食べた ........\r\nにゃあ にゃあ ........\r\n\r\n名前=ツキウサギ::性別=メス::食性=草食\r\nツキウサギ は 草食 ........草を食べた ........\r\nみゅー みゅー ........\n")),"\n",t.createElement(a.h2,{id:"解答例",style:{position:"relative"}},t.createElement(a.a,{href:"#%E8%A7%A3%E7%AD%94%E4%BE%8B","aria-label":"解答例 permalink",className:"anchor before"},t.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"解答例"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/animal"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/05.advanced/04.abstract-class-method/src/advanced/abstracts/animal")))}var c=function(e){void 0===e&&(e={});const{wrapper:a}=Object.assign({},(0,r.RP)(),e.components);return a?t.createElement(a,e,t.createElement(l,e)):l(e)};function s(e){let{children:a}=e;return a}function i(e){return t.createElement(s,e,t.createElement(c,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-advanced-04-abstract-class-method-mdx-dbd3f776903bfebdfcee.js.map