{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-entrypg-05-test-coverage-mdx-c09cefeca274dac150ff.js","mappings":"gLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,IAAK,QACJC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,CACnFU,GAAI,gBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,iGACN,aAAc,0BACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,kBAAmB,KAAMP,EAAAA,cAAoB,IAAK,CACrDK,UAAW,QACV,uBAAwB,KAAML,EAAAA,cAAoBZ,EAAYM,GAAI,CACnEO,GAAI,KACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,sBACN,aAAc,eACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBZ,EAAYO,GAAI,CACpDM,GAAI,aACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,8FACN,aAAc,uBACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,cAAe,KAAMP,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,gFAAiF,KAAMI,EAAAA,cAAoBZ,EAAYM,GAAI,CAC5LO,GAAI,gBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,yHACN,aAAc,0BACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,iBAAkB,KAAMP,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,iHAAkH,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,4CAA6C,KAAMI,EAAAA,cAAoBZ,EAAYO,GAAI,CAC5TM,GAAI,eACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,wEACN,aAAc,yBACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,gBAAiB,KAAMP,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,sGAAuG,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,sFAAuF,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAMI,EAAAA,cAAoBZ,EAAYS,IAAK,CACpYW,IAAK,yBACLC,IAAK,sBACF,KAAMT,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,gHAAiH,KAAMI,EAAAA,cAAoBZ,EAAYO,GAAI,CAC7MM,GAAI,qBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBZ,EAAYI,EAAG,CACpCY,KAAM,8EACN,aAAc,+BACdC,UAAW,iBACVL,EAAAA,cAAoBZ,EAAYK,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,sBAAuB,KAAMP,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,2CAA4C,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,+CAAgD,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,4CAA6C,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAMI,EAAAA,cAAoBZ,EAAYS,IAAK,CACpYW,IAAK,qBACLC,IAAK,kBACF,KAAMT,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,4GAA6G,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,sIAAuI,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,qMAAsM,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,8DAA+D,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,4GAA6G,KAAMI,EAAAA,cAAoBZ,EAAYQ,EAAG,KAAM,0DACv4B,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOuB,QAASC,GAAatB,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOY,EAAYX,EAAAA,cAAoBW,EAAWxB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,ECzFA,SAASyB,EAAWC,GAAa,IAAZ,SAACC,GAASD,EAC7B,OAAOC,CACT,CAEe,SAASC,EAAiB5B,GACvC,OAAOa,EAAAA,cAAoBY,EAAazB,EAAOa,EAAAA,cAAoBgB,EAAqB7B,GAC1F,C","sources":["webpack://website/./pages/docs/entrypg/05-test-coverage.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"05-テストケースの網羅性\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#05-%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E7%B6%B2%E7%BE%85%E6%80%A7\",\n    \"aria-label\": \"05 テストケースの網羅性 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"05. テストケースの網羅性\"), \"\\n\", React.createElement(\"p\", {\n    className: \"goal\"\n  }, \"テストケースの網羅性について詳しく知る\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"学習\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AD%A6%E7%BF%92\",\n    \"aria-label\": \"学習 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"学習\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"テストケースの網羅性\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E7%B6%B2%E7%BE%85%E6%80%A7\",\n    \"aria-label\": \"テストケースの網羅性 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"テストケースの網羅性\"), \"\\n\", React.createElement(_components.p, null, \"網羅性については「02.ブラックボックステスト/ホワイトボックステスト」でも調べましたが、実際にはそれをどのようにテストに当てはめるかを確認しましょう。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"テストケースの網羅性の確認\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E7%B6%B2%E7%BE%85%E6%80%A7%E3%81%AE%E7%A2%BA%E8%AA%8D\",\n    \"aria-label\": \"テストケースの網羅性の確認 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"テストケースの網羅性の確認\"), \"\\n\", React.createElement(_components.p, null, \"ここでは「04.テストケースの作成方法」で使用したプログラムとテスト仕様書を使って解説をします。\\r\\n網羅性を確認するにあたって、そもそもこの単体テストでは網羅性をどれくらい細かく確認するか知っている必要があります。\"), \"\\n\", React.createElement(_components.p, null, \"網羅性にはいくつか種類が存在しますが、今回は複合条件網羅(MCC)を適用します。\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"startメソッドの確認\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#start%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E7%A2%BA%E8%AA%8D\",\n    \"aria-label\": \"startメソッドの確認 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"startメソッドの確認\"), \"\\n\", React.createElement(_components.p, null, \"今回確認するプログラムのメイン処理はLearningクラスのstartメソッドですので、そこから確認をしていきましょう。\\r\\n網羅性はプログラムが条件によって分岐する処理に対して確認を行います。\"), \"\\n\", React.createElement(_components.p, null, \"start()メソッドでは入力した演算子によって処理が分岐します。\\r\\nswitch文で処理が4パターンに分かれる部分に対してテストが行われているかを確認します。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"./switch-test-case.png\",\n    alt: \"switch文のテストケース確認\"\n  })), \"\\n\", React.createElement(_components.p, null, \"この場合は、テスト仕様書のテストケースNo 1-1-7からNo 1-1-10までをクリアできれば、それぞれの分岐を通ったのが確認できます。\\r\\n既にすべての分岐を網羅しているので追加のテストケースは必要ありません。\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"inputnumberメソッドの確認\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#inputnumber%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E7%A2%BA%E8%AA%8D\",\n    \"aria-label\": \"inputnumberメソッドの確認 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"inputNumberメソッドの確認\"), \"\\n\", React.createElement(_components.p, null, \"続いて、数字の入力に使っているinputNumberメソッドを確認しましょう。\"), \"\\n\", React.createElement(_components.p, null, \"一つ目のif文ではキーボードから入力した値がint型かどうかを判定し、分岐しています。\"), \"\\n\", React.createElement(_components.p, null, \"二つ目のif文ではisValidInputフラグの値を判定して、分岐しています。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"./if-test-case.png\",\n    alt: \"if文のテストケース確認\"\n  })), \"\\n\", React.createElement(_components.p, null, \"この場合、黄色い枠の処理は入力した値がint型の場合に実行されます。テストケースNo 1-1-5ではint型の数値を入力し、出力されることを確認しているため、黄色い枠の処理が実行されていることが確認できます。\"), \"\\n\", React.createElement(_components.p, null, \"赤色の枠は入力した値がint型ではなかった場合に実行されます。\\r\\nテストケースNo 1-1-3ではint型以外の入力値があった場合に警告メッセージを表示して、数値が再度入力できることを確認しているため、不正な入力値が確かに回収されていることが確認できます。\"), \"\\n\", React.createElement(_components.p, null, \"※ここで注意しておきたいのは、今回の実装方法では入力値がint型ではなかった場合にif文の判定が必ず「false」になることです。\\r\\nそのため、「int型以外の入力値」のテストとしてint型ではない値を一種類だけピックアップしても構いません。\\r\\n実装方法によっては少数や記号なども別々のテストを実施する必要がありますので注意をしてください。例）正規表現による入力値のテストなど。\"), \"\\n\", React.createElement(_components.p, null, \"最後に緑色の枠はisValidInputの値が「true」の場合と「false」の場合の両方をテストする必要がある。\"), \"\\n\", React.createElement(_components.p, null, \"テストケースNo 1-1-5ではisValidInputの値が「true」のとき、No 1-1-3ではisValidInputの値が「false」のときの確認ができますので追加のテストケースは必要ありません。\"), \"\\n\", React.createElement(_components.p, null, \"これで全ての分岐処理が網羅できていることが確認できたため、テストケースの追加は必要ないことが確認できました。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/WebSiteRepositories/JavaBootcampMirror/java-bootcamp-mirror/website/pages/docs/entrypg/05-test-coverage.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","h2","h3","p","img","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","src","alt","wrapper","MDXLayout","DocTemplate","_ref","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}