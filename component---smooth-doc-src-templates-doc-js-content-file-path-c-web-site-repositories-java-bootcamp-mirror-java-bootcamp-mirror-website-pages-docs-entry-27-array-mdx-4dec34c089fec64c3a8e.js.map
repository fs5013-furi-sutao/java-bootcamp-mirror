{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-entry-27-array-mdx-4dec34c089fec64c3a8e.js","mappings":"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","sources":["webpack://website/./pages/docs/entry/27-array.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    h2: \"h2\",\n    h3: \"h3\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"27-java-の配列\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#27-java-%E3%81%AE%E9%85%8D%E5%88%97\",\n    \"aria-label\": \"27 java の配列 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"27. Java の配列\"), \"\\n\", React.createElement(\"p\", {\n    className: \"goal\"\n  }, \"配列のデータを使った処理を実装できるようになること\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"学習\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AD%A6%E7%BF%92\",\n    \"aria-label\": \"学習 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"学習\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"配列を知る\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%85%8D%E5%88%97%E3%82%92%E7%9F%A5%E3%82%8B\",\n    \"aria-label\": \"配列を知る permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"配列を知る\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"./01-variable\"\n  }, \"01.Java の変数\"), \"で学習したように値を 1 つ格納するには変数を使います。\\r\\nしかし複数の値を格納したい場合は、変数だけでは不便な場面も多いです。例えば次のような例を見てみましょう。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String name1 = \\\"山田\\\";\\r\\nString name2 = \\\"鈴木\\\";\\r\\nString name3 = \\\"佐藤\\\";\\r\\n\\r\\nint age1 = 20;\\r\\nint age2 = 25;\\r\\nint age3 = 30;\\r\\n\\r\\nSystem.out.printf(\\\"%s さんは %d 歳です.\\\\n\\\", name1, age1);\\r\\nSystem.out.printf(\\\"%s さんは %d 歳です.\\\\n\\\", name2, age2);\\r\\nSystem.out.printf(\\\"%s さんは %d 歳です.\\\\n\\\", name3, age3);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\",\n    \"aria-label\": \"実行結果 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"山田 さんは 20 歳です.\\r\\n鈴木 さんは 25 歳です.\\r\\n佐藤 さんは 30 歳です.\\n\")), \"\\n\", React.createElement(_components.p, null, \"このプログラムでは 3 人の名前と年齢を変数に入れてから表示をしています。\\r\\nほぼ同じ名前の変数が複数存在しているので、少し管理が大変ですが無理ではないです。\"), \"\\n\", React.createElement(_components.p, null, \"では 100人、1000 人の情報を保持したい場合も同じ方法を使ったらどうでしょうか。\\r\\n変数の管理が大変になり、記述しなければいけないプログラムの量も膨大になるのが想像できるはずです。\\r\\nこのような問題を解決してくれるのが「配列」です。\"), \"\\n\", React.createElement(_components.p, null, \"変数が「箱」に例えられるのに対して、配列は温泉施設などの「ロッカー」に例えられます。\\r\\n温泉施設のロッカーには荷物を入れる場所が複数存在し、一つ一つに番号が割り振られています。\\r\\n配列も同じようなイメージを持つと理解がしやすいです。\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"配列の宣言\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%85%8D%E5%88%97%E3%81%AE%E5%AE%A3%E8%A8%80\",\n    \"aria-label\": \"配列の宣言 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"配列の宣言\"), \"\\n\", React.createElement(_components.p, null, \"配列の宣言は変数の宣言と似ていますが、データ型の後ろに角括弧を付ける必要があります。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names;\\n\")), \"\\n\", React.createElement(_components.p, null, \"次に、配列に持たせる箱の数を決める必要があります。この数のことを「要素数」と呼びます。\"), \"\\n\", React.createElement(_components.p, null, \"つまり 3 つの値を入れたい場合は次のように要素が 3 つの配列であることを明記しなければいけないです。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names;\\r\\nnames = new String[3];\\n\")), \"\\n\", React.createElement(_components.p, null, \"また、この 2 行のプログラムを省略して 1 行で書くことも出来ます。省略した形は次のようになります。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names = new String[3];\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"配列に値を代入\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%85%8D%E5%88%97%E3%81%AB%E5%80%A4%E3%82%92%E4%BB%A3%E5%85%A5\",\n    \"aria-label\": \"配列に値を代入 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"配列に値を代入\"), \"\\n\", React.createElement(_components.p, null, \"配列に値を代入する場合はどの要素に入れるかを記述します。要素を識別するために 0 から始まる連番を使います。これの数値のことを「添え字（そえじ）」と呼びます。\"), \"\\n\", React.createElement(_components.p, null, \"今回は 3 つの要素を持つ配列を作りましたので、添え字は 0 ~ 2 です。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names = new String[3];\\r\\n\\r\\nnames[0] = \\\"山田\\\";\\r\\nnames[1] = \\\"鈴木\\\";\\r\\nnames[2] = \\\"佐藤\\\";\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"配列の初期化\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%85%8D%E5%88%97%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96\",\n    \"aria-label\": \"配列の初期化 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"配列の初期化\"), \"\\n\", React.createElement(_components.p, null, \"配列は変数と同じように「初期化」をすることもできます。初期化処理は次のように書きます。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names = {\\\"山田\\\", \\\"鈴木\\\", \\\"佐藤\\\"};\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"配列の値を出力\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E9%85%8D%E5%88%97%E3%81%AE%E5%80%A4%E3%82%92%E5%87%BA%E5%8A%9B\",\n    \"aria-label\": \"配列の値を出力 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"配列の値を出力\"), \"\\n\", React.createElement(_components.p, null, \"配列の値を出力する場合は、代入するときと同じように添え字を指定する必要があります。\\r\\n全ての名前を表示する場合は次のように書きます。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names = {\\\"山田\\\", \\\"鈴木\\\", \\\"佐藤\\\"};\\r\\n\\r\\nSystem.out.println(names[0]);\\r\\nSystem.out.println(names[1]);\\r\\nSystem.out.println(names[2]);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-1\",\n    \"aria-label\": \"実行結果 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"山田\\r\\n鈴木\\r\\n佐藤\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"まとめ\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E3%81%BE%E3%81%A8%E3%82%81\",\n    \"aria-label\": \"まとめ permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"まとめ\"), \"\\n\", React.createElement(_components.p, null, \"最初に提示したプログラムは配列を使って書き直すと次のようになります。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names = {\\\"山田\\\", \\\"鈴木\\\", \\\"佐藤\\\"};\\r\\nint[] ages = {20, 25, 30};\\r\\n\\r\\nSystem.out.printf(\\\"%s さんは %d 歳です.\\\\n\\\", names[0], ages[0]);\\r\\nSystem.out.printf(\\\"%s さんは %d 歳です.\\\\n\\\", names[1], ages[1]);\\r\\nSystem.out.printf(\\\"%s さんは %d 歳です.\\\\n\\\", names[2], ages[2]);\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"実行結果-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-2\",\n    \"aria-label\": \"実行結果 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"実行結果\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"山田 さんは 20 歳です.\\r\\n鈴木 さんは 25 歳です.\\r\\n佐藤 さんは 30 歳です.\\r\\n高橋 さんは 28 歳です.\\r\\n山本 さんは 34 歳です.\\n\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"プラスα\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%E3%83%97%E3%83%A9%E3%82%B9%CE%B1\",\n    \"aria-label\": \"プラスα permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"プラスα\"), \"\\n\", React.createElement(_components.p, null, \"配列はwhile文やfor文などの繰り返し処理と非常に相性が良いです。\\r\\nfor文などの使い方は後に出てきますが、ここで知っておいて欲しいのは配列とfor文などの繰り返し処理を組みわせると楽ができる点です。\"), \"\\n\", React.createElement(_components.p, null, \"下の例ではfor文を使うことでデータの数に関わらず、同じプログラムで配列の値を表示することができます。\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"String[] names = {\\\"山田\\\", \\\"鈴木\\\", \\\"佐藤\\\", \\\"高橋\\\", \\\"山本\\\"};\\r\\nint[] ages = {20, 25, 30, 28, 34};\\r\\n\\r\\nfor(int i = 0;i < names.length;i++) {\\r\\n    System.out.printf(\\\"%s さんは %d 歳です.\\\\n\\\", names[i], ages[i]);\\r\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"C:/WebSiteRepositories/JavaBootcampMirror/java-bootcamp-mirror/website/pages/docs/entry/27-array.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","h2","h3","p","pre","code","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","DocTemplate","_ref","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}