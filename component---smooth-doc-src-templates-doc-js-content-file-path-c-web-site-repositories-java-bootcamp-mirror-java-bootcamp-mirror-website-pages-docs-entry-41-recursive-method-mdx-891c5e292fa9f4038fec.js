"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7512],{64584:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var a=t(63696),r=t(43023);function l(e){const n=Object.assign({h1:"h1",a:"a",div:"div",h2:"h2",h3:"h3",p:"p",pre:"pre",code:"code",h4:"h4",strong:"strong",br:"br",img:"img"},(0,r.RP)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,{id:"41-再帰メソッド",style:{position:"relative"}},a.createElement(n.a,{href:"#41-%E5%86%8D%E5%B8%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89","aria-label":"41 再帰メソッド permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"41. 再帰メソッド"),"\n",a.createElement("p",{className:"goal"},"再帰処理の流れを追えるようになること"),"\n",a.createElement(n.h2,{id:"学習",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%AD%A6%E7%BF%92","aria-label":"学習 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"学習"),"\n",a.createElement(n.h3,{id:"再帰という処理",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%86%8D%E5%B8%B0%E3%81%A8%E3%81%84%E3%81%86%E5%87%A6%E7%90%86","aria-label":"再帰という処理 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"再帰という処理"),"\n",a.createElement(n.p,null,"再帰メソッドというのは、メソッドの中から、自身のメソッドを呼ぶ構造をしたメソッドのことです。"),"\n",a.createElement(n.p,null,"数学でいうと、階乗やフィボナッチ数列を求める時に、再帰メソッドが使われます。"),"\n",a.createElement(n.p,null,"実際に再帰メソッドの例を見てみましょう。"),"\n",a.createElement(n.h3,{id:"再帰メソッドで足し算",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%86%8D%E5%B8%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%A7%E8%B6%B3%E3%81%97%E7%AE%97","aria-label":"再帰メソッドで足し算 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"再帰メソッドで足し算"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java",meta:"title=src/RecursiveAdder.java"},'public class RecursiveAdder {\r\n    public static void main(String[] args) {\r\n\r\n        int num = 3;\r\n\r\n        System.out.printf(\r\n            "1 ～ %d の整数を足した結果 => %d %n"\r\n            , num, add(num)\r\n        );\r\n      }\r\n\r\n      public static int add(int num) {\r\n        if (num <= 0) return 0;\r\n\r\n        return num + add(num - 1);\r\n      }\r\n}\n')),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/41.recursive-method/src/RecursiveAdder.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/41.recursive-method/src/RecursiveAdder.java")),"\n",a.createElement(n.h4,{id:"recursiveadder-の実行結果",style:{position:"relative"}},a.createElement(n.a,{href:"#recursiveadder-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C","aria-label":"recursiveadder の実行結果 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"RecursiveAdder の実行結果"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"1 ～ 3 の整数を足した結果 => 6\n")),"\n",a.createElement(n.h4,{id:"処理を追ってみる",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B","aria-label":"処理を追ってみる permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"処理を追ってみる"),"\n",a.createElement(n.p,null,"この処理では add メソッドの中で add メソッドを再度呼び出しています。その際に元々渡ってきた引数の num と再度読んだ add メソッドの戻り値を足しています。add メソッドの引数には元々の引数から 1 引いた値を渡しています。"),"\n",a.createElement(n.p,null,"つまり、スタートは num が 3 なので"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"3 + add(2)\n")),"\n",a.createElement(n.p,null,"となります。また ",a.createElement(n.code,null,"add(2)")," は"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"2 + add(1)\n")),"\n",a.createElement(n.p,null,"なので"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"3 + 2 + add(1)\n")),"\n",a.createElement(n.p,null,"となります。",a.createElement(n.code,null,"add(1)")," は"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"1 + add(0)\n")),"\n",a.createElement(n.p,null,"であり、",a.createElement(n.code,null,"add(0)")," は 0 が終了条件に引っかかるので ",a.createElement(n.code,null,"0")," が戻り値として返ってきます。"),"\n",a.createElement(n.p,null,"よって"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"3 + 2 + 1 + 0\n")),"\n",a.createElement(n.p,null,"となり 6 が出力されます。"),"\n",a.createElement(n.h2,{id:"練習問題-再帰処理を追ってみよう時間-20-分",style:{position:"relative"}},a.createElement(n.a,{href:"#%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C-%E5%86%8D%E5%B8%B0%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E6%99%82%E9%96%93-20-%E5%88%86","aria-label":"練習問題 再帰処理を追ってみよう時間 20 分 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"練習問題: 再帰処理を追ってみよう（時間: 20 分）"),"\n",a.createElement(n.p,null,"再帰処理の流れを追う練習として、基本情報技術者試験の問題を解いてみましょう。"),"\n",a.createElement(n.p,null,"問題の内容は、",a.createElement(n.strong,null,"スタックに対して再帰呼び出しで Pop と Push を繰り返すコード")," です。"),"\n",a.createElement(n.p,null,"「スタック」が分からない場合は、検索ワード「 ",a.createElement(n.a,{href:"https://www.google.com/search?q=%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0+%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF"},"データ構造 スタック")," 」で調べてください。"),"\n",a.createElement(n.p,null,"基本情報技術者試験の平成 31 年春期 午前問 6 の問題を引用します。"),"\n",a.createElement(n.p,null,"基本情報技術者平成 31 年春期 午前問 6",a.createElement(n.br),"\n",a.createElement(n.a,{href:"https://www.fe-siken.com/kakomon/31_haru/q6.html"},"https://www.fe-siken.com/kakomon/31_haru/q6.html")),"\n",a.createElement(n.p,null,"変数 A, B, C はいずれも、スタックのデータ構造です。各変数とも、あらかじめ「1」「2」「3」がスタックされています。"),"\n",a.createElement(n.p,null,"この状態を Java のコードにすると、以下のようになります。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java",meta:"title=src/RecursiveStack.java"},'import java.util.ArrayDeque;\r\nimport java.util.Deque;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class RecursiveStack {\r\n\r\n    static Deque<Integer> A = new ArrayDeque<>();\r\n    static Deque<Integer> B = new ArrayDeque<>();\r\n    static Deque<Integer> C = new ArrayDeque<>();\r\n\r\n    public static void main(String[] args) {\r\n\r\n        RecursiveStack app = new RecursiveStack();\r\n        app.fill();\r\n\r\n        app.print();\r\n    }\r\n\r\n    void fill() {\r\n        for (int i = 1; i <= 3; i++) {\r\n            A.push(i);\r\n            B.push(i);\r\n            C.push(i);\r\n        }\r\n    }\r\n\r\n    private void print() {\r\n        Map<String, Deque<Integer>> stackMap = new HashMap<>();\r\n        stackMap.put("A", A);\r\n        stackMap.put("B", B);\r\n        stackMap.put("C", C);\r\n        this.print(stackMap);\r\n    }\r\n\r\n    private void print(Map<String, Deque<Integer>> stackMap) {\r\n        stackMap.forEach((k, v) -> {\r\n            System.out.printf("%s=", k);\r\n            for (int element : v) {\r\n                System.out.print(element + ", ");\r\n            }\r\n            System.out.println();\r\n        });\r\n    }\r\n}\n')),"\n",a.createElement(n.p,null,"最初の状態がどうなっているか、実行してみましょう。"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"A=3, 2, 1,\r\nB=3, 2, 1,\r\nC=3, 2, 1,\n")),"\n",a.createElement(n.p,null,"それでは出題された問題となっている再帰メソッドを見てみます。"),"\n",a.createElement(n.h3,{id:"再帰メソッド",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%86%8D%E5%B8%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89","aria-label":"再帰メソッド permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"再帰メソッド"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-java"},"void f() {\r\n        if (A.isEmpty()) {\r\n            // nothing\r\n        } else {\r\n            C.push(A.pop());\r\n            f();\r\n            B.push(C.pop());\r\n        }\r\n    }\n")),"\n",a.createElement(n.p,null,"ここでやっと課題です。この ",a.createElement(n.code,null,"f()")," メソッドの実行後、A, B, C の変数の中身はどうなるか？処理を追ってみてください。"),"\n",a.createElement(n.p,null,"一度、答えを出してから、以下の解答・解説を見てください。"),"\n",a.createElement(n.h2,{id:"解答解説",style:{position:"relative"}},a.createElement(n.a,{href:"#%E8%A7%A3%E7%AD%94%E8%A7%A3%E8%AA%AC","aria-label":"解答解説 permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"解答・解説"),"\n",a.createElement(n.p,null,"再帰呼び出しの動きを表すと、以下のイメージになります。"),"\n",a.createElement("details",null,a.createElement("summary",null,"解答・解説を読む（クリックで開く）"),a.createElement(n.p,null,a.createElement(n.img,{src:"./images/stack_pop_push_flow.png",alt:""}))),"\n",a.createElement(n.h2,{id:"完全版のソースコード",style:{position:"relative"}},a.createElement(n.a,{href:"#%E5%AE%8C%E5%85%A8%E7%89%88%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89","aria-label":"完全版のソースコード permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"完全版のソースコード"),"\n",a.createElement(n.p,null,"スタックの再帰メソッドについての完全版ソースコードは以下の通りです。"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/41.recursive-method/src/RecursiveStack.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/41.recursive-method/src/RecursiveStack.java")),"\n",a.createElement(n.p,null,"処理を実際に追いたい場合は、デバッグで動かしてみてください。"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?a.createElement(n,e,a.createElement(l,e)):l(e)};function i(e){let{children:n}=e;return n}function s(e){return a.createElement(i,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-entry-41-recursive-method-mdx-891c5e292fa9f4038fec.js.map