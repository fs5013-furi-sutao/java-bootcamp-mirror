"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9798],{79541:function(e,a,l){l.r(a),l.d(a,{default:function(){return E}});var n=l(63696),t=l(43023);function r(e){const a=Object.assign({h1:"h1",a:"a",div:"div",h2:"h2",p:"p",strong:"strong",h3:"h3",pre:"pre",code:"code",h4:"h4",img:"img"},(0,t.RP)(),e.components);return n.createElement(n.Fragment,null,n.createElement(a.h1,{id:"42-java-の値渡しと参照渡し",style:{position:"relative"}},n.createElement(a.a,{href:"#42-java-%E3%81%AE%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%A8%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97","aria-label":"42 java の値渡しと参照渡し permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"42. Java の値渡しと参照渡し"),"\n",n.createElement("p",{className:"goal"},"どんな時に値渡しとなり、どんな時に参照渡しになり、それぞれの処理結果がどう違いがあるかを説明できること"),"\n",n.createElement(a.h2,{id:"値渡しと参照渡し",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%A8%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97","aria-label":"値渡しと参照渡し permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"値渡しと参照渡し"),"\n",n.createElement(a.p,null,"Java で外部メソッドに引数を渡す方法として、2 種類の方法があります。"),"\n",n.createElement(a.p,null,"1 つが基本型変数による「値渡し」であり、もう 1 つが参照型変数による「参照渡し」です。"),"\n",n.createElement(a.h2,{id:"基本型とは参照型とは",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%9F%BA%E6%9C%AC%E5%9E%8B%E3%81%A8%E3%81%AF%E5%8F%82%E7%85%A7%E5%9E%8B%E3%81%A8%E3%81%AF","aria-label":"基本型とは参照型とは permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"基本型とは？参照型とは？"),"\n",n.createElement(a.p,null,n.createElement(a.strong,null,"基本型")),"\n",n.createElement(a.p,null,"Java のデータにおいて、基本型とは long, int, short, byte, float, double, boolean, char の 8 つのデータ型です。"),"\n",n.createElement(a.p,null,"基本データ型の変数は、型によって必要なビット数が決まっています。これらの型の値を保持する変数を基本データ型変数といいます。"),"\n",n.createElement(a.p,null,n.createElement(a.strong,null,"参照型")),"\n",n.createElement(a.p,null,"一方の参照型は、一般的なクラスから生成したインスタンスが該当します。",n.createElement("span",{style:{color:"#ff0000"}}," ",n.createElement(a.strong,null,"配列も参照型に含まれます。")," "),"実は、配列も内部的にはインスタンスが生成されているのです。"),"\n",n.createElement(a.p,null,"参照型は、値そのものを保持するのではなく、値が置いてある場所（メモリのアドレス）を保持します。値が置いてある場所を示すアドレスを保持する変数を 参照型変数といいます。"),"\n",n.createElement(a.h2,{id:"java-の基本型は値渡し",style:{position:"relative"}},n.createElement(a.a,{href:"#java-%E3%81%AE%E5%9F%BA%E6%9C%AC%E5%9E%8B%E3%81%AF%E5%80%A4%E6%B8%A1%E3%81%97","aria-label":"java の基本型は値渡し permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Java の基本型は「値渡し」"),"\n",n.createElement(a.p,null,"Java の基本型では、外部メソッドへ引数を渡す方法として、「値渡し」という方法が使われます。"),"\n",n.createElement(a.h3,{id:"基本型の変数を引数にする",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%9F%BA%E6%9C%AC%E5%9E%8B%E3%81%AE%E5%A4%89%E6%95%B0%E3%82%92%E5%BC%95%E6%95%B0%E3%81%AB%E3%81%99%E3%82%8B","aria-label":"基本型の変数を引数にする permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"基本型の変数を引数にする"),"\n",n.createElement(a.p,null,"Java には、基本型（プリミティブ）と参照型があります。基本型では、値渡し（Call By Value）というメソッドの呼び出し方をします。"),"\n",n.createElement(a.p,null,"次のコードは、基本型の変数を引数にして外部のメソッドを呼ぶ典型的な例です。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,{className:"language-java",meta:"title=値渡し"},'public class CallByValue {\r\n    public static void main(String[] args) {\r\n\r\n        int foo = 128;\r\n        deliver(foo);\r\n\r\n        System.out.printf("int foo => %d %n", foo);\r\n    }\r\n    private static void deliver(int bar) {\r\n\r\n        bar = 256;\r\n\r\n        System.out.printf("int bar => %d %n", bar);\r\n    }\r\n}\n')),"\n",n.createElement(a.p,null,n.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValue.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValue.java")),"\n",n.createElement(a.h4,{id:"実行結果",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C","aria-label":"実行結果 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"実行結果"),"\n",n.createElement(a.p,null,"呼び出し元の変数 foo は変更されていません。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,null,"int bar = 256\r\nint foo = 128\n")),"\n",n.createElement(a.h3,{id:"値渡しの特徴",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%AE%E7%89%B9%E5%BE%B4","aria-label":"値渡しの特徴 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"「値渡し」の特徴"),"\n",n.createElement(a.p,null,"上で挙げた例で、どんな現象が起こっているのか見てみます。"),"\n",n.createElement(a.p,null,"foo を引数としてメソッドに渡し、メソッド内でその引数を変更しようとも、元の変数 foo の値は変わりません。"),"\n",n.createElement(a.p,null,"どうして値が書き換わらないのか。外部メソッドに渡しているのが、変数の「実体」ではなく「値のみ」だからです。"),"\n",n.createElement(a.h3,{id:"内部処理のイメージ",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%86%85%E9%83%A8%E5%87%A6%E7%90%86%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8","aria-label":"内部処理のイメージ permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"内部処理のイメージ"),"\n",n.createElement(a.p,null,"では実際にメモリでどんなことが行われているか、処理を見てみます。"),"\n",n.createElement(a.p,null,n.createElement(a.img,{src:"./images/call-by-value-on-java.png",alt:""})),"\n",n.createElement(a.p,null,"基本型変数の値は、メモリのスタック領域に格納されます。ヒープ領域は使いません。"),"\n",n.createElement(a.p,null,"スタック領域に格納されるデータは後入れ先出し（LIFO）なので、後入れした bar が上に来た状態でイメージを表現しています。"),"\n",n.createElement(a.p,null,"実引数 foo が bar に渡されますが、ここで渡されるのは値のみ。実体そのものではありません。"),"\n",n.createElement(a.p,null,"呼び出されたメソッドでは、渡された値を書き換えているだけ。foo の実体を書き換えているわけではありません。"),"\n",n.createElement(a.h3,{id:"間違ったイメージ",style:{position:"relative"}},n.createElement(a.a,{href:"#%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8","aria-label":"間違ったイメージ permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"間違ったイメージ"),"\n",n.createElement(a.p,null,"次の図は値渡しの間違ったイメージです。"),"\n",n.createElement(a.p,null,n.createElement(a.img,{src:"./images/doubt-image-of-call-by-value.png",alt:""})),"\n",n.createElement(a.p,null,"間違ったイメージでは、foo の実体がメッソドに渡され、その値が書き換えられています。"),"\n",n.createElement(a.p,null,"このイメージでいくと、メソッドで受け取った引数を変更することで、元の変数も変わってしまうことになります。"),"\n",n.createElement(a.p,null,"しかし、Java の基本型ではこのようなことは行われません。また、このようなイメージを値渡しとは呼びません。"),"\n",n.createElement(a.h2,{id:"java-の参照型は参照の値渡しコードで見てみる",style:{position:"relative"}},n.createElement(a.a,{href:"#java-%E3%81%AE%E5%8F%82%E7%85%A7%E5%9E%8B%E3%81%AF%E5%8F%82%E7%85%A7%E3%81%AE%E5%80%A4%E6%B8%A1%E3%81%97%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A7%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B","aria-label":"java の参照型は参照の値渡しコードで見てみる permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Java の参照型は「参照の値渡し」：コードで見てみる"),"\n",n.createElement(a.p,null,"外部メソッドへ引数を渡す方法は色々ありますが、Java の参照型では「参照の値渡し」という方法が使われます。ここでは、ひと言では分かりにくい「参照の値渡し」という現象をコードの側面から見てみます。"),"\n",n.createElement(a.h3,{id:"３つの事例",style:{position:"relative"}},n.createElement(a.a,{href:"#%EF%BC%93%E3%81%A4%E3%81%AE%E4%BA%8B%E4%BE%8B","aria-label":"３つの事例 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"３つの事例"),"\n",n.createElement(a.p,null,"Java には、基本型（プリミティブ型）と参照型があります。参照型では、参照の値渡し（Call By Value of Reference）というメソッドの呼び出し方をします。"),"\n",n.createElement(a.p,null,"例をコードで見てみます。"),"\n",n.createElement(a.h4,{id:"例１フィールドを書き換える",style:{position:"relative"}},n.createElement(a.a,{href:"#%E4%BE%8B%EF%BC%91%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B","aria-label":"例１フィールドを書き換える permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"例１：フィールドを書き換える"),"\n",n.createElement(a.p,null,"次のコードは参照型の変数が利用する Obj クラスです。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,{className:"language-java",meta:"title=Objクラス"},"public class Obj {\r\n    public int num;\r\n}\n")),"\n",n.createElement(a.p,null,n.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/Obj.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/Obj.java")),"\n",n.createElement(a.p,null,"そして次のコードが、参照型の変数を引数にして外部のメソッドを呼ぶ典型的な例です。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,{className:"language-java",meta:"title=参照渡し"},'class CallByValueOfReference_basis {\r\n    public static void main(String[] args) {\r\n\r\n        Obj foo = new Obj();\r\n        foo.num = 128;\r\n\r\n        deliver(foo);\r\n\r\n        System.out.printf(" foo.num => %d %n", foo.num);\r\n    }\r\n\r\n    private static void deliver(Obj bar) {\r\n        bar.num = 256;\r\n        System.out.printf(" bar.num => %d %n", bar.num);\r\n    }\r\n}\n')),"\n",n.createElement(a.p,null,n.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValueOfReference_basis.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValueOfReference_basis.java")),"\n",n.createElement(a.h4,{id:"実行結果-1",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-1","aria-label":"実行結果 1 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"実行結果"),"\n",n.createElement(a.p,null,"呼び出し元の変数 foo が書き換わっています。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,null," bar.num => 256\r\n foo.num => 256\n")),"\n",n.createElement(a.h3,{id:"典型的な例だけ見ると",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%85%B8%E5%9E%8B%E7%9A%84%E3%81%AA%E4%BE%8B%E3%81%A0%E3%81%91%E8%A6%8B%E3%82%8B%E3%81%A8","aria-label":"典型的な例だけ見ると permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"典型的な例だけ見ると"),"\n",n.createElement(a.p,null,"典型的な例だけ見ると、Java の参照型は「参照渡し」をしているように見えます。"),"\n",n.createElement(a.h3,{id:"参照渡しの特徴",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%81%AE%E7%89%B9%E5%BE%B4","aria-label":"参照渡しの特徴 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"「参照渡し」の特徴"),"\n",n.createElement(a.p,null,"参照渡しは、メソッドの引数に参照を渡す方法です。"),"\n",n.createElement(a.p,null,"参照渡しを行うと、引数 (仮引数) を変更すると元の変数 (実引数) も変更される という現象がおこります。上記のコード実行例では、まさにこのような現象が起きていますね。"),"\n",n.createElement(a.p,null,"この例だけ見れば「Java の参照型は参照渡し」と言えます。しかし実際には、Java は参照渡しを行いません。なぜでしょうか。"),"\n",n.createElement(a.h4,{id:"例２new-する",style:{position:"relative"}},n.createElement(a.a,{href:"#%E4%BE%8B%EF%BC%92new-%E3%81%99%E3%82%8B","aria-label":"例２new する permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"例２：new する"),"\n",n.createElement(a.p,null,"今度は、引数で渡したオブジェクトを new してみます。その後は前例と同じようにオブジェクトのフィールドを書き換えます。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,{className:"language-java",meta:"title=参照渡し（newしてみる）"},'class CallByValueOfReference_new {\r\n    public static void main(String[] args) {\r\n\r\n        Obj foo = new Obj();\r\n        foo.num = 128;\r\n\r\n        deliver(foo);\r\n\r\n        System.out.printf(" foo.num => %d %n", foo.num);\r\n    }\r\n\r\n    private static void deliver(Obj bar) {\r\n        bar = new Obj();\r\n        bar.num = 256;\r\n        System.out.printf(" bar.num => %d %n", bar.num);\r\n    }\r\n}\n')),"\n",n.createElement(a.p,null,n.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValueOfReference_new.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValueOfReference_new.java")),"\n",n.createElement(a.h4,{id:"実行結果-2",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-2","aria-label":"実行結果 2 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"実行結果"),"\n",n.createElement(a.p,null,"呼び出し元の変数 foo は変更されていません。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,null," bar.num => 256\r\n foo.num => 128\n")),"\n",n.createElement(a.h3,{id:"結果を見ると",style:{position:"relative"}},n.createElement(a.a,{href:"#%E7%B5%90%E6%9E%9C%E3%82%92%E8%A6%8B%E3%82%8B%E3%81%A8","aria-label":"結果を見ると permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"結果を見ると"),"\n",n.createElement(a.p,null,"結果を見ると、元の変数 foo の値が書き換わっていません。"),"\n",n.createElement(a.p,null,"参照渡しでは、この現象の説明がつきません。参照渡しであれば、foo.num の値は 256 になるはずだからです。"),"\n",n.createElement(a.h4,{id:"例３オブジェクトに-null-を代入する",style:{position:"relative"}},n.createElement(a.a,{href:"#%E4%BE%8B%EF%BC%93%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-null-%E3%82%92%E4%BB%A3%E5%85%A5%E3%81%99%E3%82%8B","aria-label":"例３オブジェクトに null を代入する permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"例３：オブジェクトに null を代入する"),"\n",n.createElement(a.p,null,"もう１つ例を見てみます。今度は引数で渡したオブジェクトに null を代入します。その後はまた同じように、オブジェクトのフィールドの値を書き換えます。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,{className:"language-java",meta:"title=参照渡し（nullを代入してみる）"},'class CallByValueOfReference_null {\r\n    public static void main(String[] args) {\r\n\r\n        Obj foo = new Obj();\r\n        foo.num = 128;\r\n\r\n        deliver(foo);\r\n\r\n        System.out.printf(" foo.num => %d %n", foo.num);\r\n    }\r\n\r\n    private static void deliver(Obj bar) {\r\n        bar = null;\r\n        System.out.printf(" bar => %d %n", bar);\r\n    }\r\n}\n')),"\n",n.createElement(a.p,null,n.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValueOfReference_null.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/CallByValueOfReference_null.java")),"\n",n.createElement(a.h4,{id:"実行結果-3",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-3","aria-label":"実行結果 3 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"実行結果"),"\n",n.createElement(a.p,null,"呼び出し元の変数 foo は変更されていません。"),"\n",n.createElement(a.pre,null,n.createElement(a.code,null," bar => null\r\n foo.num => 128\n")),"\n",n.createElement(a.h3,{id:"なぜこんなことが起こるのか",style:{position:"relative"}},n.createElement(a.a,{href:"#%E3%81%AA%E3%81%9C%E3%81%93%E3%82%93%E3%81%AA%E3%81%93%E3%81%A8%E3%81%8C%E8%B5%B7%E3%81%93%E3%82%8B%E3%81%AE%E3%81%8B","aria-label":"なぜこんなことが起こるのか permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"なぜこんなことが起こるのか"),"\n",n.createElement(a.p,null,"仮引数（引数で渡されたオブジェクト）のフィールドの値をメソッド内で書き換えると、実引数（引数で渡された元のオブジェクト）のフィールドの値も書き換わる。"),"\n",n.createElement(a.p,null,"それなのに一方では、引数で渡されたオブジェクトをメソッド内で new したり、null を代入した場合は、なぜ書き換わらないのか。"),"\n",n.createElement(a.p,null,"その答えはやはり「Java の参照型は参照の値渡しだから」なのです。"),"\n",n.createElement(a.h2,{id:"java-の参照型は参照の値渡し処理イメージで見てみる",style:{position:"relative"}},n.createElement(a.a,{href:"#java-%E3%81%AE%E5%8F%82%E7%85%A7%E5%9E%8B%E3%81%AF%E5%8F%82%E7%85%A7%E3%81%AE%E5%80%A4%E6%B8%A1%E3%81%97%E5%87%A6%E7%90%86%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%A7%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B","aria-label":"java の参照型は参照の値渡し処理イメージで見てみる permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Java の参照型は「参照の値渡し」：処理イメージで見てみる"),"\n",n.createElement(a.p,null,"外部メソッドへ引数を渡す方法は色々ありますが、Java の参照型変数をメソッドの引数に渡す方法では「参照の値渡し」という方法が使われます。ここでは、ひと言では分かりにくい「参照の値渡し」の意味を、メモリ内部の処理イメージしながら考えていきます。"),"\n",n.createElement(a.p,null,n.createElement(a.code,null,"この記事で使われるメモリ内部の処理イメージは説明しやすいように簡略化しており、あくまでも Java プログラムの挙動を理解するための手段として利用しています。使用されている図が正確なイメージではないことには注意してください")),"\n",n.createElement(a.h3,{id:"内部処理のイメージ-1",style:{position:"relative"}},n.createElement(a.a,{href:"#%E5%86%85%E9%83%A8%E5%87%A6%E7%90%86%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8-1","aria-label":"内部処理のイメージ 1 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"内部処理のイメージ"),"\n",n.createElement(a.p,null,"では実際にメモリでどんなことが行われているか、処理を見てみます。上記記事のコード例にイメージは対応しているので、コードを追いながら参考にしてください。"),"\n",n.createElement(a.h4,{id:"間違った参照の値渡しのイメージ",style:{position:"relative"}},n.createElement(a.a,{href:"#%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E5%8F%82%E7%85%A7%E3%81%AE%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8","aria-label":"間違った参照の値渡しのイメージ permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"間違った「参照の値渡し」のイメージ"),"\n",n.createElement(a.p,null,"まずは間違った「参照の値渡し」のイメージを紹介します。"),"\n",n.createElement(a.p,null,n.createElement(a.img,{src:"./images/doubt-image.png",alt:""})),"\n",n.createElement(a.p,null,"間違っているポイントは、foo と bar が同じ参照先を保持していることです。この状態は、参照の値渡しではなく、参照そのものを渡す「参照渡し」です。"),"\n",n.createElement(a.p,null,"メモリのスタック領域では、オブジェクトは参照先を示す値（アドレス）を保持しています。この例では 1440 番です。"),"\n",n.createElement(a.p,null,"実際のオブジェクトはヒープ領域に格納されており、例えばアドレスの 1440 番の位置に格納されたオブジェクトの num の値は 128 になっています。"),"\n",n.createElement(a.p,null,"そこでもし、メソッド内で仮引数 bar に新たなオブジェクトを代入したらどうなるでしょうか。"),"\n",n.createElement(a.p,null,"当然、スタック領域に保持されているオブジェクト参照情報は、新たなオブジェクト参照アドレスに置き換わります。この場合は、3551 番になっています。"),"\n",n.createElement(a.p,null,"さらに、この新たなオブジェクトのフィールド num の値を 256 にしたら、結果的に foo.num の値は 256 になるはずです。"),"\n",n.createElement(a.p,null,"ところが実際にこのようなプログラムを Java で書くと、このようにはなりません。 foo.num の値は 128 になります。"),"\n",n.createElement(a.p,null,"なぜなら Java の参照型は、参照そのものを渡す「参照渡し」ではなく、参照の値を渡す「参照の値渡し」だからです。"),"\n",n.createElement(a.h4,{id:"仮引数のオブジェクトに新オブジェクトを代入した場合",style:{position:"relative"}},n.createElement(a.a,{href:"#%E4%BB%AE%E5%BC%95%E6%95%B0%E3%81%AE%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E6%96%B0%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BB%A3%E5%85%A5%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88","aria-label":"仮引数のオブジェクトに新オブジェクトを代入した場合 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"仮引数のオブジェクトに新オブジェクトを代入した場合"),"\n",n.createElement(a.p,null,"では実際に「参照の値渡し」で、メソッド先でオブジェクトに new を代入した場合のイメージを見てみます。"),"\n",n.createElement(a.p,null,n.createElement(a.img,{src:"./images/new-into-formal-arg.png",alt:""})),"\n",n.createElement(a.p,null,"参照渡しとは違い、メソッドの引数に参照の値（アドレス）を渡しています。参照の値渡しです。"),"\n",n.createElement(a.p,null,"メソッド内で仮引数 bar に新しいオブジェクトを代入すると、スタック領域の値は、新しいオブジェクトが格納されているヒープ領域のアドレスに置き換わります。図の例では 3511 番です。"),"\n",n.createElement(a.p,null,"メソッド内でこのオブジェクトの num の値を 256 にしようが、foo.num の値は変わりません。bar に新しいオブジェクトを代入した時点で、foo と bar、実引数と仮引数の参照先は異なってしまったからです。"),"\n",n.createElement(a.p,null,"この挙動は、実際の Java プログラムの挙動に合致します。"),"\n",n.createElement(a.h4,{id:"仮引数のオブジェクトに-null-を代入した場合",style:{position:"relative"}},n.createElement(a.a,{href:"#%E4%BB%AE%E5%BC%95%E6%95%B0%E3%81%AE%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-null-%E3%82%92%E4%BB%A3%E5%85%A5%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88","aria-label":"仮引数のオブジェクトに null を代入した場合 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"仮引数のオブジェクトに null を代入した場合"),"\n",n.createElement(a.p,null,"ダメ押しの感はありますが、例をもう１つ。「参照の値渡し」で、メソッド先でオブジェクトに new を代入した場合のイメージです。"),"\n",n.createElement(a.p,null,n.createElement(a.img,{src:"./images/null-into-formal-arg.png",alt:""}),"\r\n参照の値渡しのため、仮引数 bar に null を代入した時点で bar の参照先情報は無くなります。ただし、参照渡しとは違い、foo の参照先は置き変わりません。"),"\n",n.createElement(a.p,null,"bar の参照先は無い（null）ので、bar.num にアクセスしようとすると NullPointerException が出ます。"),"\n",n.createElement(a.h2,{id:"まとめ",style:{position:"relative"}},n.createElement(a.a,{href:"#%E3%81%BE%E3%81%A8%E3%82%81","aria-label":"まとめ permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"まとめ"),"\n",n.createElement(a.p,null,"最後に参照の値渡しの典型的なパターンを見て、メモリ内部の処理イメージをおさらいします。"),"\n",n.createElement(a.p,null,n.createElement(a.img,{src:"./images/call-by-value-of-reference.png",alt:""})),"\n",n.createElement(a.p,null,"実引数 foo オブジェクトをメソッドに渡すと、その参照の値、図の例では 1440 番が仮引数 bar に渡されます。これがまさに「参照の値渡し」です。"),"\n",n.createElement(a.p,null,"そしてメソッド内で、bar.num に 256 を代入するということは、ヒープ領域の 1440 番にアクセスし、オブジェクトの num の値を 256 に書き換えることになります。"),"\n",n.createElement(a.p,null,"すると、実引数と仮引数のフィールドの値が同じになり、あたかも参照渡しをしているような挙動に見えてしまいます。"),"\n",n.createElement(a.p,null,"しかし、new や null を代入した例からも分かるように、内部的な処理は「参照の値渡し」で行われています。"),"\n",n.createElement(a.h2,{id:"練習問題時間-20-分",style:{position:"relative"}},n.createElement(a.a,{href:"#%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C%E6%99%82%E9%96%93-20-%E5%88%86","aria-label":"練習問題時間 20 分 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"練習問題（時間: 20 分）"),"\n",n.createElement(a.p,null,"プログラム実行結果が以下に示したようになる ArrayUpdater クラスを作成しなさい"),"\n",n.createElement(a.h3,{id:"main-メソッド",style:{position:"relative"}},n.createElement(a.a,{href:"#main-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89","aria-label":"main メソッド permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"main メソッド"),"\n",n.createElement(a.p,null,"配列に 1 ～ 5 の整数を詰め込んで、updateArray メソッドで配列内の要素をすべて逆転させ、結果を表示する"),"\n",n.createElement(a.h3,{id:"updatearray-インスタンスメソッド",style:{position:"relative"}},n.createElement(a.a,{href:"#updatearray-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89","aria-label":"updatearray インスタンスメソッド permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"updateArray インスタンスメソッド"),"\n",n.createElement(a.p,null,"渡された配列内の要素を前後逆転させる"),"\n",n.createElement(a.h3,{id:"updatearray-の実行結果",style:{position:"relative"}},n.createElement(a.a,{href:"#updatearray-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C","aria-label":"updatearray の実行結果 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"updateArray の実行結果"),"\n",n.createElement(a.pre,null,n.createElement(a.code,null,"5\r\n4\r\n3\r\n2\r\n1\n")),"\n",n.createElement(a.h2,{id:"解答例",style:{position:"relative"}},n.createElement(a.a,{href:"#%E8%A7%A3%E7%AD%94%E4%BE%8B","aria-label":"解答例 permalink",className:"anchor before"},n.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"解答例"),"\n",n.createElement(a.p,null,n.createElement(a.a,{href:"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/ArrayUpdater.java"},"https://github.com/fs5013-furi-sutao/java-bootcamp-answers/blob/main/02.entry/42.call-by-value-and-call-by-reference/src/ArrayUpdater.java")))}var c=function(e){void 0===e&&(e={});const{wrapper:a}=Object.assign({},(0,t.RP)(),e.components);return a?n.createElement(a,e,n.createElement(r,e)):r(e)};function i(e){let{children:a}=e;return a}function E(e){return n.createElement(i,e,n.createElement(c,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-c-web-site-repositories-java-bootcamp-mirror-java-bootcamp-mirror-website-pages-docs-entry-42-call-by-value-and-call-by-reference-mdx-cee0321dcd4fc429788b.js.map